{
  if (size == 0)   return;
  INSERT_LINE_NUMBER_OFFSET:   if (lineNumber != -1) {
    Offset o;
    for (o=this.currentInserter.prev; o != this.beginning; o=o.prev) {
      if (o instanceof LineNumberOffset) {
        if (((LineNumberOffset)o).lineNumber == lineNumber)         break INSERT_LINE_NUMBER_OFFSET;
        break;
      }
    }
    LineNumberOffset lno=new LineNumberOffset(this.currentInserter.offset,lineNumber);
    lno.prev=this.currentInserter.prev;
    lno.next=this.currentInserter;
    this.currentInserter.prev.next=lno;
    this.currentInserter.prev=lno;
  }
  int ico=this.currentInserter.offset;
  if (this.end.offset + size <= this.code.length) {
    if (ico != this.end.offset) {
      System.arraycopy(this.code,ico,this.code,ico + size,this.end.offset - ico);
    }
  }
 else {
    byte[] oldCode=this.code;
    int newSize=Math.max(Math.min(oldCode.length * 2,0xffff),oldCode.length + size);
    if (newSize > 0xffff) {
      throw new JaninoRuntimeException("Code of method \"" + this.functionName + "\" of class \""+ this.classFile.getThisClassName()+ "\" grows beyond 64 KB");
    }
    this.code=new byte[newSize];
    System.arraycopy(oldCode,0,this.code,0,ico);
    System.arraycopy(oldCode,ico,this.code,ico + size,this.end.offset - ico);
  }
  Arrays.fill(this.code,ico,ico + size,(byte)0);
  for (Offset o=this.currentInserter; o != null; o=o.next)   o.offset+=size;
}
