{
  final ErrorHandler ceh=(this.optionalCompileErrorHandler != null ? this.optionalCompileErrorHandler : new ErrorHandler(){
    int compileErrorCount;
    @Override public void handleError(    String message,    Location optionalLocation) throws CompileException {
      CompileException ex=new CompileException(message,optionalLocation);
      if (++this.compileErrorCount >= 20)       throw ex;
      System.err.println(ex.getMessage());
    }
  }
);
  this.benchmark.beginReporting();
  try {
    this.parsedCompilationUnits.clear();
    for (    Resource sourceResource : sourceResources) {
      if (Compiler.DEBUG)       System.out.println("Compiling \"" + sourceResource + "\"");
      this.parsedCompilationUnits.add(new UnitCompiler(this.parseCompilationUnit(sourceResource.getFileName(),new BufferedInputStream(sourceResource.open()),this.optionalCharacterEncoding),this.iClassLoader));
    }
    for (int i=0; i < this.parsedCompilationUnits.size(); ++i) {
      UnitCompiler unitCompiler=(UnitCompiler)this.parsedCompilationUnits.get(i);
      File sourceFile;
{
        CompilationUnit compilationUnit=unitCompiler.getCompilationUnit();
        if (compilationUnit.optionalFileName == null)         throw new JaninoRuntimeException();
        sourceFile=new File(compilationUnit.optionalFileName);
      }
      unitCompiler.setCompileErrorHandler(ceh);
      unitCompiler.setWarningHandler(this.optionalWarningHandler);
      this.benchmark.beginReporting("Compiling compilation unit \"" + sourceFile + "\"");
      ClassFile[] classFiles;
      try {
        classFiles=unitCompiler.compileUnit(this.debugSource,this.debugLines,this.debugVars);
      }
  finally {
        this.benchmark.endReporting();
      }
      this.benchmark.beginReporting("Storing " + classFiles.length + " class file(s) resulting from compilation unit \""+ sourceFile+ "\"");
      try {
        for (        ClassFile classFile : classFiles)         this.storeClassFile(classFile,sourceFile);
      }
  finally {
        this.benchmark.endReporting();
      }
    }
  }
  finally {
    this.benchmark.endReporting("Compiled " + this.parsedCompilationUnits.size() + " compilation unit(s)");
  }
  return true;
}
