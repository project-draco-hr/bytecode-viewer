{
  File destinationDirectory=Compiler.NO_DESTINATION_DIRECTORY;
  File[] optionalSourcePath=null;
  File[] classPath={new File(".")};
  File[] optionalExtDirs=null;
  File[] optionalBootClassPath=null;
  String optionalCharacterEncoding=null;
  boolean verbose=false;
  boolean debugSource=true;
  boolean debugLines=true;
  boolean debugVars=false;
  StringPattern[] warningHandlePatterns=Compiler.DEFAULT_WARNING_HANDLE_PATTERNS;
  boolean rebuild=false;
  int i;
  for (i=0; i < args.length; ++i) {
    String arg=args[i];
    if (arg.charAt(0) != '-')     break;
    if ("-d".equals(arg)) {
      destinationDirectory=new File(args[++i]);
    }
 else     if ("-sourcepath".equals(arg)) {
      optionalSourcePath=PathResourceFinder.parsePath(args[++i]);
    }
 else     if ("-classpath".equals(arg)) {
      classPath=PathResourceFinder.parsePath(args[++i]);
    }
 else     if ("-extdirs".equals(arg)) {
      optionalExtDirs=PathResourceFinder.parsePath(args[++i]);
    }
 else     if ("-bootclasspath".equals(arg)) {
      optionalBootClassPath=PathResourceFinder.parsePath(args[++i]);
    }
 else     if ("-encoding".equals(arg)) {
      optionalCharacterEncoding=args[++i];
    }
 else     if ("-verbose".equals(arg)) {
      verbose=true;
    }
 else     if ("-g".equals(arg)) {
      debugSource=true;
      debugLines=true;
      debugVars=true;
    }
 else     if (arg.startsWith("-g:")) {
      if (arg.indexOf("none") != -1)       debugSource=(debugLines=(debugVars=false));
      if (arg.indexOf("source") != -1)       debugSource=true;
      if (arg.indexOf("lines") != -1)       debugLines=true;
      if (arg.indexOf("vars") != -1)       debugVars=true;
    }
 else     if (arg.startsWith("-warn:")) {
      warningHandlePatterns=StringPattern.parseCombinedPattern(arg.substring(6));
    }
 else     if ("-rebuild".equals(arg)) {
      rebuild=true;
    }
 else     if ("-help".equals(arg)) {
      System.out.printf(Compiler.USAGE,(Object[])null);
    }
 else {
      System.err.println("Unrecognized command line option \"" + arg + "\"; try \"-help\".");
    }
  }
  if (i == args.length) {
    System.err.println("No source files given on command line; try \"-help\".");
  }
  File[] sourceFiles=new File[args.length - i];
  for (int j=i; j < args.length; ++j)   sourceFiles[j - i]=new File(args[j]);
  final Compiler compiler=new Compiler(optionalSourcePath,classPath,optionalExtDirs,optionalBootClassPath,destinationDirectory,optionalCharacterEncoding,verbose,debugSource,debugLines,debugVars,warningHandlePatterns,rebuild);
  compiler.compile(sourceFiles);
}
