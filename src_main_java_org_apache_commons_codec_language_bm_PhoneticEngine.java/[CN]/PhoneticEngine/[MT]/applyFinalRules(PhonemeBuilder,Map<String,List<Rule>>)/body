{
  if (finalRules == null) {
    throw new NullPointerException("finalRules can not be null");
  }
  if (finalRules.isEmpty()) {
    return phonemeBuilder;
  }
  final Map<Rule.Phoneme,Rule.Phoneme> phonemes=new TreeMap<Rule.Phoneme,Rule.Phoneme>(Rule.Phoneme.COMPARATOR);
  for (  final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {
    PhonemeBuilder subBuilder=PhonemeBuilder.empty(phoneme.getLanguages());
    final String phonemeText=phoneme.getPhonemeText().toString();
    for (int i=0; i < phonemeText.length(); ) {
      final RulesApplication rulesApplication=new RulesApplication(finalRules,phonemeText,subBuilder,i,maxPhonemes).invoke();
      final boolean found=rulesApplication.isFound();
      subBuilder=rulesApplication.getPhonemeBuilder();
      if (!found) {
        subBuilder.append(phonemeText.subSequence(i,i + 1));
      }
      i=rulesApplication.getI();
    }
    for (    final Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {
      if (phonemes.containsKey(newPhoneme)) {
        final Rule.Phoneme oldPhoneme=phonemes.remove(newPhoneme);
        final Rule.Phoneme mergedPhoneme=oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());
        phonemes.put(mergedPhoneme,mergedPhoneme);
      }
 else {
        phonemes.put(newPhoneme,newPhoneme);
      }
    }
  }
  return new PhonemeBuilder(phonemes.keySet());
}
