{
  final Map<String,List<Rule>> rules=Rule.getInstanceMap(this.nameType,RuleType.RULES,languageSet);
  final Map<String,List<Rule>> finalRules1=Rule.getInstanceMap(this.nameType,this.ruleType,"common");
  final Map<String,List<Rule>> finalRules2=Rule.getInstanceMap(this.nameType,this.ruleType,languageSet);
  input=input.toLowerCase(Locale.ENGLISH).replace('-',' ').trim();
  if (this.nameType == NameType.GENERIC) {
    if (input.length() >= 2 && input.substring(0,2).equals("d'")) {
      final String remainder=input.substring(2);
      final String combined="d" + remainder;
      return "(" + encode(remainder) + ")-("+ encode(combined)+ ")";
    }
    for (    final String l : NAME_PREFIXES.get(this.nameType)) {
      if (input.startsWith(l + " ")) {
        final String remainder=input.substring(l.length() + 1);
        final String combined=l + remainder;
        return "(" + encode(remainder) + ")-("+ encode(combined)+ ")";
      }
    }
  }
  final List<String> words=Arrays.asList(input.split("\\s+"));
  final List<String> words2=new ArrayList<String>();
switch (this.nameType) {
case SEPHARDIC:
    for (    final String aWord : words) {
      final String[] parts=aWord.split("'");
      final String lastPart=parts[parts.length - 1];
      words2.add(lastPart);
    }
  words2.removeAll(NAME_PREFIXES.get(this.nameType));
break;
case ASHKENAZI:
words2.addAll(words);
words2.removeAll(NAME_PREFIXES.get(this.nameType));
break;
case GENERIC:
words2.addAll(words);
break;
default :
throw new IllegalStateException("Unreachable case: " + this.nameType);
}
if (this.concat) {
input=join(words2," ");
}
 else if (words2.size() == 1) {
input=words.iterator().next();
}
 else {
final StringBuilder result=new StringBuilder();
for (final String word : words2) {
result.append("-").append(encode(word));
}
return result.substring(1);
}
PhonemeBuilder phonemeBuilder=PhonemeBuilder.empty(languageSet);
for (int i=0; i < input.length(); ) {
final RulesApplication rulesApplication=new RulesApplication(rules,input,phonemeBuilder,i,maxPhonemes).invoke();
i=rulesApplication.getI();
phonemeBuilder=rulesApplication.getPhonemeBuilder();
}
phonemeBuilder=applyFinalRules(phonemeBuilder,finalRules1);
phonemeBuilder=applyFinalRules(phonemeBuilder,finalRules2);
return phonemeBuilder.makeString();
}
