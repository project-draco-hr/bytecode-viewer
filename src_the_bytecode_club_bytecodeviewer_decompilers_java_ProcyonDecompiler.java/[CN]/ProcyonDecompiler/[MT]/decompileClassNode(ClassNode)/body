{
  try {
    final ClassWriter cw=new ClassWriter(0);
    cn.accept(cw);
    String fileStart=BytecodeViewer.tempDirectory + BytecodeViewer.fs + "temp";
    int fileNumber=getClassNumber(fileStart,".class");
    final File tempClass=new File(fileStart + fileNumber + ".class");
    try {
      final FileOutputStream fos=new FileOutputStream(tempClass);
      fos.write(cw.toByteArray());
      fos.close();
    }
 catch (    final IOException e) {
      e.printStackTrace();
    }
    DecompilerSettings settings=new DecompilerSettings();
    settings.setAlwaysGenerateExceptionVariableForCatchBlocks(BytecodeViewer.viewer.chckbxmntmNewCheckItem_6.isSelected());
    settings.setExcludeNestedTypes(BytecodeViewer.viewer.chckbxmntmNewCheckItem_11.isSelected());
    settings.setShowDebugLineNumbers(BytecodeViewer.viewer.chckbxmntmShowDebugLine.isSelected());
    settings.setIncludeLineNumbersInBytecode(BytecodeViewer.viewer.chckbxmntmNewCheckItem_3.isSelected());
    settings.setIncludeErrorDiagnostics(BytecodeViewer.viewer.chckbxmntmNewCheckItem_4.isSelected());
    settings.setShowSyntheticMembers(BytecodeViewer.viewer.chckbxmntmNewCheckItem_7.isSelected());
    settings.setSimplifyMemberReferences(BytecodeViewer.viewer.chckbxmntmSimplifyMemberReferences.isSelected());
    settings.setMergeVariables(BytecodeViewer.viewer.mnMergeVariables.isSelected());
    settings.setForceExplicitTypeArguments(BytecodeViewer.viewer.chckbxmntmNewCheckItem_8.isSelected());
    settings.setForceExplicitImports(BytecodeViewer.viewer.chckbxmntmNewCheckItem_9.isSelected());
    settings.setFlattenSwitchBlocks(BytecodeViewer.viewer.chckbxmntmNewCheckItem_10.isSelected());
    settings.setRetainPointlessSwitches(BytecodeViewer.viewer.chckbxmntmNewCheckItem_2.isSelected());
    settings.setRetainRedundantCasts(BytecodeViewer.viewer.chckbxmntmNewCheckItem_5.isSelected());
    settings.setUnicodeOutputEnabled(BytecodeViewer.viewer.chckbxmntmNewCheckItem_1.isSelected());
    settings.setFormattingOptions(JavaFormattingOptions.createDefault());
    LuytenTypeLoader typeLoader=new LuytenTypeLoader();
    MetadataSystem metadataSystem=new MetadataSystem(typeLoader);
    TypeReference type=metadataSystem.lookupType(tempClass.getCanonicalPath());
    DecompilationOptions decompilationOptions=new DecompilationOptions();
    decompilationOptions.setSettings(DecompilerSettings.javaDefaults());
    decompilationOptions.setFullDecompilation(true);
    TypeDefinition resolvedType=null;
    if (type == null || ((resolvedType=type.resolve()) == null)) {
      throw new Exception("Unable to resolve type.");
    }
    StringWriter stringwriter=new StringWriter();
    settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(stringwriter),decompilationOptions);
    String decompiledSource=stringwriter.toString();
    return decompiledSource;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return "Procyon error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com";
}
