{
  try {
    this.ANNO_java_lang_Override=this.loadIClass(Descriptor.JAVA_LANG_OVERRIDE);
    this.TYPE_java_lang_AssertionError=this.loadIClass(Descriptor.JAVA_LANG_ASSERTIONERROR);
    this.TYPE_java_lang_Boolean=this.loadIClass(Descriptor.JAVA_LANG_BOOLEAN);
    this.TYPE_java_lang_Byte=this.loadIClass(Descriptor.JAVA_LANG_BYTE);
    this.TYPE_java_lang_Character=this.loadIClass(Descriptor.JAVA_LANG_CHARACTER);
    this.TYPE_java_lang_Class=this.loadIClass(Descriptor.JAVA_LANG_CLASS);
    this.TYPE_java_lang_Cloneable=this.loadIClass(Descriptor.JAVA_LANG_CLONEABLE);
    this.TYPE_java_lang_Double=this.loadIClass(Descriptor.JAVA_LANG_DOUBLE);
    this.TYPE_java_lang_Exception=this.loadIClass(Descriptor.JAVA_LANG_EXCEPTION);
    this.TYPE_java_lang_Error=this.loadIClass(Descriptor.JAVA_LANG_ERROR);
    this.TYPE_java_lang_Float=this.loadIClass(Descriptor.JAVA_LANG_FLOAT);
    this.TYPE_java_lang_Integer=this.loadIClass(Descriptor.JAVA_LANG_INTEGER);
    this.TYPE_java_lang_Iterable=this.loadIClass(Descriptor.JAVA_LANG_ITERABLE);
    this.TYPE_java_lang_Long=this.loadIClass(Descriptor.JAVA_LANG_LONG);
    this.TYPE_java_lang_Object=this.loadIClass(Descriptor.JAVA_LANG_OBJECT);
    this.TYPE_java_lang_RuntimeException=this.loadIClass(Descriptor.JAVA_LANG_RUNTIMEEXCEPTION);
    this.TYPE_java_lang_Short=this.loadIClass(Descriptor.JAVA_LANG_SHORT);
    this.TYPE_java_lang_String=this.loadIClass(Descriptor.JAVA_LANG_STRING);
    this.TYPE_java_lang_StringBuilder=this.loadIClass(Descriptor.JAVA_LANG_STRINGBUILDER);
    this.TYPE_java_lang_Throwable=this.loadIClass(Descriptor.JAVA_LANG_THROWABLE);
    this.TYPE_java_io_Serializable=this.loadIClass(Descriptor.JAVA_IO_SERIALIZABLE);
    this.TYPE_java_util_Iterator=this.loadIClass(Descriptor.JAVA_UTIL_ITERATOR);
    this.METH_java_lang_Iterable__iterator=this.TYPE_java_lang_Iterable.findIMethod("iterator",new IClass[0]);
    this.METH_java_lang_String__concat__java_lang_String=this.TYPE_java_lang_String.findIMethod("concat",new IClass[]{this.TYPE_java_lang_String});
    this.METH_java_lang_String__valueOf__int=this.TYPE_java_lang_String.findIMethod("valueOf",new IClass[]{IClass.INT});
    this.METH_java_lang_String__valueOf__long=this.TYPE_java_lang_String.findIMethod("valueOf",new IClass[]{IClass.LONG});
    this.METH_java_lang_String__valueOf__float=this.TYPE_java_lang_String.findIMethod("valueOf",new IClass[]{IClass.FLOAT});
    this.METH_java_lang_String__valueOf__double=this.TYPE_java_lang_String.findIMethod("valueOf",new IClass[]{IClass.DOUBLE});
    this.METH_java_lang_String__valueOf__char=this.TYPE_java_lang_String.findIMethod("valueOf",new IClass[]{IClass.CHAR});
    this.METH_java_lang_String__valueOf__boolean=this.TYPE_java_lang_String.findIMethod("valueOf",new IClass[]{IClass.BOOLEAN});
    this.METH_java_lang_String__valueOf__java_lang_Object=this.TYPE_java_lang_String.findIMethod("valueOf",new IClass[]{this.TYPE_java_lang_Object});
    this.METH_java_lang_StringBuilder__append__java_lang_String=this.TYPE_java_lang_StringBuilder.findIMethod("append",new IClass[]{this.TYPE_java_lang_String});
    this.METH_java_lang_StringBuilder__toString=this.TYPE_java_lang_StringBuilder.findIMethod("toString",new IClass[0]);
    this.METH_java_util_Iterator__hasNext=this.TYPE_java_util_Iterator.findIMethod("hasNext",new IClass[0]);
    this.METH_java_util_Iterator__next=this.TYPE_java_util_Iterator.findIMethod("next",new IClass[0]);
    this.CTOR_java_lang_StringBuilder__java_lang_String=this.TYPE_java_lang_StringBuilder.findIConstructor(new IClass[]{this.TYPE_java_lang_String});
  }
 catch (  Exception e) {
    throw new JaninoRuntimeException("Cannot load simple types",e);
  }
}
