{
  nv.visitAny(this);
switch (insn.type()) {
case INSN:
{
      if (opcode() >= ICONST_M1 && opcode() <= DCONST_1) {
        nv.visitNumber((NumberNode)this);
      }
 else       if (opcode() >= I2L && opcode() <= I2S) {
        nv.visitConversion((ConversionNode)this);
      }
 else       if (opcode() >= IADD && opcode() <= LXOR) {
        nv.visitOperation((ArithmeticNode)this);
      }
 else {
        nv.visit(this);
      }
      break;
    }
case INT_INSN:
{
    nv.visitNumber((NumberNode)this);
    break;
  }
case VAR_INSN:
{
  nv.visitVariable((VariableNode)this);
  break;
}
case TYPE_INSN:
{
nv.visitType((TypeNode)this);
break;
}
case FIELD_INSN:
{
nv.visitField((FieldMemberNode)this);
break;
}
case METHOD_INSN:
{
nv.visitMethod((MethodMemberNode)this);
break;
}
case JUMP_INSN:
{
nv.visitJump((JumpNode)this);
break;
}
case LABEL:
{
nv.visitLabel(this);
break;
}
case LDC_INSN:
{
Object cst=((LdcInsnNode)insn()).cst;
if (cst != null && cst instanceof Number) {
nv.visitNumber((NumberNode)this);
}
 else {
nv.visitConstant((ConstantNode)this);
}
break;
}
case IINC_INSN:
{
nv.visitIinc((IincNode)this);
break;
}
case TABLESWITCH_INSN:
{
nv.visitTableSwitch(this);
break;
}
case LOOKUPSWITCH_INSN:
{
nv.visitLookupSwitch(this);
break;
}
case MULTIANEWARRAY_INSN:
{
nv.visitMultiANewArray(this);
break;
}
case FRAME:
{
nv.visitFrame(this);
break;
}
case LINE:
{
nv.visitLine(this);
break;
}
}
}
