{
  final InstructionSearcher is=new InstructionSearcher(mn);
  for (  Object e : mn.tryCatchBlocks.toArray()) {
    TryCatchBlockNode t=(TryCatchBlockNode)e;
    String type=t.type;
    LabelNode start=t.start;
    LabelNode end=t.end;
    LabelNode handler=t.handler;
    builder.appendnl("trycatch block L" + start.hashCode() + " to L"+ end.hashCode()+ " handled by L"+ handler.hashCode()+ " exception type: "+ type);
  }
  int index=0;
  for (  AbstractInsnNode next : mn.instructions.toArray()) {
    if (next.getOpcode() == -1) {
      if (next instanceof LabelNode) {
        LabelNode l=(LabelNode)next;
        builder.appendnl(index++ + ". L" + l.hashCode());
      }
 else {
        builder.appendnl(index++ + ". nop //actually an unimplement opcode, please contact Konloch");
      }
      continue;
    }
    builder.append(index++ + ". " + opcodeStrings[next.getOpcode()]+ " ");
    if (next instanceof FieldInsnNode) {
      final FieldInsnNode fin=(FieldInsnNode)next;
      builder.append(fin.owner + " " + fin.name+ " "+ fin.desc);
    }
 else     if (next instanceof MethodInsnNode) {
      final MethodInsnNode min=(MethodInsnNode)next;
      builder.append(min.owner + " " + min.name+ " "+ min.desc);
    }
 else     if (next instanceof VarInsnNode) {
      final VarInsnNode vin=(VarInsnNode)next;
      builder.append(vin.var);
      if (BytecodeViewer.viewer.debugHelpers.isSelected()) {
        if (vin.var == 0 && !Modifier.isStatic(mn.access)) {
          builder.append(" // reference to self");
        }
 else {
          final int refIndex=vin.var - (Modifier.isStatic(mn.access) ? 0 : 1);
          if (refIndex >= 0 && refIndex < args.length - 1) {
            builder.append(" // reference to " + args[refIndex].name);
          }
        }
      }
    }
 else     if (next instanceof IntInsnNode) {
      final IntInsnNode iin=(IntInsnNode)next;
      builder.append(iin.operand);
    }
 else     if (next instanceof JumpInsnNode) {
      final JumpInsnNode jin=(JumpInsnNode)next;
      builder.append(is.computePosition(jin.label));
switch (next.getOpcode()) {
case Opcodes.IF_ICMPLT:
        builder.append(" // if val1 less than val2 jump");
      break;
  }
}
 else if (next instanceof LdcInsnNode) {
  final LdcInsnNode lin=(LdcInsnNode)next;
  if (lin.cst instanceof String) {
    String s=((String)lin.cst).replaceAll("\\n","\\\\n").replaceAll("\\r","\\\\r").replaceAll("\\\"","\\\\\"");
    if (BytecodeViewer.viewer.chckbxmntmNewCheckItem.isSelected())     builder.append("\"" + StringEscapeUtils.escapeJava(s) + "\"");
 else     builder.append("\"" + s + "\"");
  }
 else {
    String s=lin.cst.toString().replaceAll("\\n","\\\\n").replaceAll("\\r","\\\\r").replaceAll("\\\"","\\\\\"");
    if (BytecodeViewer.viewer.chckbxmntmNewCheckItem.isSelected())     builder.append("\"" + StringEscapeUtils.escapeJava(s) + "\"");
 else     builder.append("\"" + s + "\"");
  }
}
 else if (next instanceof IincInsnNode) {
  final IincInsnNode iin=(IincInsnNode)next;
  builder.append("var " + iin.var + " by "+ iin.incr);
}
 else if (next instanceof TypeInsnNode) {
  final TypeInsnNode tin=(TypeInsnNode)next;
  builder.append(tin.desc);
}
 else {
}
if (BytecodeViewer.viewer.debugInstructions.isSelected()) {
  builder.append(" // " + typeStrings[next.getType()] + " ");
}
if (BytecodeViewer.viewer.debugHelpers.isSelected() && next instanceof JumpInsnNode) {
  final JumpInsnNode jin=(JumpInsnNode)next;
  builder.append(" // line " + is.computePosition(jin.label) + " is "+ printInstruction(is.computePosition(jin.label),mn,is).trim());
}
builder.appendnl();
}
}
