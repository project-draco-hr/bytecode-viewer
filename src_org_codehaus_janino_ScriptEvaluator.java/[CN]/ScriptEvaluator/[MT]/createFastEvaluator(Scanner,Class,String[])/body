{
  if (!interfaceToImplement.isInterface()) {
    throw new JaninoRuntimeException("\"" + interfaceToImplement + "\" is not an interface");
  }
  Method methodToImplement;
{
    Method[] methods=interfaceToImplement.getDeclaredMethods();
    if (methods.length != 1) {
      throw new JaninoRuntimeException("Interface \"" + interfaceToImplement + "\" must declare exactly one method");
    }
    methodToImplement=methods[0];
  }
  this.setImplementedInterfaces(new Class[]{interfaceToImplement});
  this.setOverrideMethod(true);
  this.setStaticMethod(false);
  if (this instanceof IExpressionEvaluator) {
    ((IExpressionEvaluator)this).setExpressionType(methodToImplement.getReturnType());
  }
 else {
    this.setReturnType(methodToImplement.getReturnType());
  }
  this.setMethodName(methodToImplement.getName());
  this.setParameters(parameterNames,methodToImplement.getParameterTypes());
  this.setThrownExceptions(methodToImplement.getExceptionTypes());
  this.cook(scanner);
  Class c=this.getMethod().getDeclaringClass();
  try {
    return c.newInstance();
  }
 catch (  InstantiationException e) {
    throw new JaninoRuntimeException(e.toString(),e);
  }
catch (  IllegalAccessException e) {
    throw new JaninoRuntimeException(e.toString(),e);
  }
}
