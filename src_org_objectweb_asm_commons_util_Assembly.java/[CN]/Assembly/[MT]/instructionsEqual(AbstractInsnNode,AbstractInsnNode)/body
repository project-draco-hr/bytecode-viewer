{
  if (insn1 == insn2) {
    return true;
  }
  if (insn1 == null || insn2 == null || insn1.type() != insn2.type() || insn1.opcode() != insn2.opcode()) {
    return false;
  }
  int size;
switch (insn1.type()) {
case INSN:
    return true;
case INT_INSN:
  IntInsnNode iin1=(IntInsnNode)insn1, iin2=(IntInsnNode)insn2;
return iin1.operand == iin2.operand;
case VAR_INSN:
VarInsnNode vin1=(VarInsnNode)insn1, vin2=(VarInsnNode)insn2;
return vin1.var == vin2.var;
case TYPE_INSN:
TypeInsnNode tin1=(TypeInsnNode)insn1, tin2=(TypeInsnNode)insn2;
return tin1.desc.equals(tin2.desc);
case FIELD_INSN:
FieldInsnNode fin1=(FieldInsnNode)insn1, fin2=(FieldInsnNode)insn2;
return fin1.desc.equals(fin2.desc) && fin1.name.equals(fin2.name) && fin1.owner.equals(fin2.owner);
case METHOD_INSN:
MethodInsnNode min1=(MethodInsnNode)insn1, min2=(MethodInsnNode)insn2;
return min1.desc.equals(min2.desc) && min1.name.equals(min2.name) && min1.owner.equals(min2.owner);
case INVOKE_DYNAMIC_INSN:
InvokeDynamicInsnNode idin1=(InvokeDynamicInsnNode)insn1, idin2=(InvokeDynamicInsnNode)insn2;
return idin1.bsm.equals(idin2.bsm) && Arrays.equals(idin1.bsmArgs,idin2.bsmArgs) && idin1.desc.equals(idin2.desc)&& idin1.name.equals(idin2.name);
case JUMP_INSN:
JumpInsnNode jin1=(JumpInsnNode)insn1, jin2=(JumpInsnNode)insn2;
return instructionsEqual(jin1.label,jin2.label);
case LABEL:
Label label1=((LabelNode)insn1).getLabel(), label2=((LabelNode)insn2).getLabel();
return label1 == null ? label2 == null : label1.info == null ? label2.info == null : label1.info.equals(label2.info);
case LDC_INSN:
LdcInsnNode lin1=(LdcInsnNode)insn1, lin2=(LdcInsnNode)insn2;
return lin1.cst.equals(lin2.cst);
case IINC_INSN:
IincInsnNode iiin1=(IincInsnNode)insn1, iiin2=(IincInsnNode)insn2;
return iiin1.incr == iiin2.incr && iiin1.var == iiin2.var;
case TABLESWITCH_INSN:
TableSwitchInsnNode tsin1=(TableSwitchInsnNode)insn1, tsin2=(TableSwitchInsnNode)insn2;
size=tsin1.labels.size();
if (size != tsin2.labels.size()) {
return false;
}
for (int i=0; i < size; i++) {
if (!instructionsEqual(tsin1.labels.get(i),tsin2.labels.get(i))) {
return false;
}
}
return instructionsEqual(tsin1.dflt,tsin2.dflt) && tsin1.max == tsin2.max && tsin1.min == tsin2.min;
case LOOKUPSWITCH_INSN:
LookupSwitchInsnNode lsin1=(LookupSwitchInsnNode)insn1, lsin2=(LookupSwitchInsnNode)insn2;
size=lsin1.labels.size();
if (size != lsin2.labels.size()) {
return false;
}
for (int i=0; i < size; i++) {
if (!instructionsEqual(lsin1.labels.get(i),lsin2.labels.get(i))) {
return false;
}
}
return instructionsEqual(lsin1.dflt,lsin2.dflt) && lsin1.keys.equals(lsin2.keys);
case MULTIANEWARRAY_INSN:
MultiANewArrayInsnNode manain1=(MultiANewArrayInsnNode)insn1, manain2=(MultiANewArrayInsnNode)insn2;
return manain1.desc.equals(manain2.desc) && manain1.dims == manain2.dims;
case FRAME:
FrameNode fn1=(FrameNode)insn1, fn2=(FrameNode)insn2;
return fn1.local.equals(fn2.local) && fn1.stack.equals(fn2.stack);
case LINE:
LineNumberNode lnn1=(LineNumberNode)insn1, lnn2=(LineNumberNode)insn2;
return lnn1.line == lnn2.line && instructionsEqual(lnn1.start,lnn2.start);
}
return false;
}
