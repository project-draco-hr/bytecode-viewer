{
  final List<LangRule> rules=new ArrayList<LangRule>();
  final InputStream lRulesIS=Lang.class.getClassLoader().getResourceAsStream(languageRulesResourceName);
  if (lRulesIS == null) {
    throw new IllegalStateException("Unable to resolve required resource:" + LANGUAGE_RULES_RN);
  }
  final Scanner scanner=new Scanner(lRulesIS,ResourceConstants.ENCODING);
  try {
    boolean inExtendedComment=false;
    while (scanner.hasNextLine()) {
      final String rawLine=scanner.nextLine();
      String line=rawLine;
      if (inExtendedComment) {
        if (line.endsWith(ResourceConstants.EXT_CMT_END)) {
          inExtendedComment=false;
        }
      }
 else {
        if (line.startsWith(ResourceConstants.EXT_CMT_START)) {
          inExtendedComment=true;
        }
 else {
          final int cmtI=line.indexOf(ResourceConstants.CMT);
          if (cmtI >= 0) {
            line=line.substring(0,cmtI);
          }
          line=line.trim();
          if (line.length() == 0) {
            continue;
          }
          final String[] parts=line.split("\\s+");
          if (parts.length != 3) {
            throw new IllegalArgumentException("Malformed line '" + rawLine + "' in language resource '"+ languageRulesResourceName+ "'");
          }
          final Pattern pattern=Pattern.compile(parts[0]);
          final String[] langs=parts[1].split("\\+");
          final boolean accept=parts[2].equals("true");
          rules.add(new LangRule(pattern,new HashSet<String>(Arrays.asList(langs)),accept));
        }
      }
    }
  }
  finally {
    scanner.close();
  }
  return new Lang(rules,languages);
}
