{
  TypeReference ref=new TypeReference(typeRef);
switch (ref.getSort()) {
case TypeReference.CLASS_TYPE_PARAMETER:
    buf.append("CLASS_TYPE_PARAMETER ").append(ref.getTypeParameterIndex());
  break;
case TypeReference.METHOD_TYPE_PARAMETER:
buf.append("METHOD_TYPE_PARAMETER ").append(ref.getTypeParameterIndex());
break;
case TypeReference.CLASS_EXTENDS:
buf.append("CLASS_EXTENDS ").append(ref.getSuperTypeIndex());
break;
case TypeReference.CLASS_TYPE_PARAMETER_BOUND:
buf.append("CLASS_TYPE_PARAMETER_BOUND ").append(ref.getTypeParameterIndex()).append(", ").append(ref.getTypeParameterBoundIndex());
break;
case TypeReference.METHOD_TYPE_PARAMETER_BOUND:
buf.append("METHOD_TYPE_PARAMETER_BOUND ").append(ref.getTypeParameterIndex()).append(", ").append(ref.getTypeParameterBoundIndex());
break;
case TypeReference.FIELD:
buf.append("FIELD");
break;
case TypeReference.METHOD_RETURN:
buf.append("METHOD_RETURN");
break;
case TypeReference.METHOD_RECEIVER:
buf.append("METHOD_RECEIVER");
break;
case TypeReference.METHOD_FORMAL_PARAMETER:
buf.append("METHOD_FORMAL_PARAMETER ").append(ref.getFormalParameterIndex());
break;
case TypeReference.THROWS:
buf.append("THROWS ").append(ref.getExceptionIndex());
break;
case TypeReference.LOCAL_VARIABLE:
buf.append("LOCAL_VARIABLE");
break;
case TypeReference.RESOURCE_VARIABLE:
buf.append("RESOURCE_VARIABLE");
break;
case TypeReference.EXCEPTION_PARAMETER:
buf.append("EXCEPTION_PARAMETER ").append(ref.getTryCatchBlockIndex());
break;
case TypeReference.INSTANCEOF:
buf.append("INSTANCEOF");
break;
case TypeReference.NEW:
buf.append("NEW");
break;
case TypeReference.CONSTRUCTOR_REFERENCE:
buf.append("CONSTRUCTOR_REFERENCE");
break;
case TypeReference.METHOD_REFERENCE:
buf.append("METHOD_REFERENCE");
break;
case TypeReference.CAST:
buf.append("CAST ").append(ref.getTypeArgumentIndex());
break;
case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:
buf.append("CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT ").append(ref.getTypeArgumentIndex());
break;
case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:
buf.append("METHOD_INVOCATION_TYPE_ARGUMENT ").append(ref.getTypeArgumentIndex());
break;
case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:
buf.append("CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT ").append(ref.getTypeArgumentIndex());
break;
case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:
buf.append("METHOD_REFERENCE_TYPE_ARGUMENT ").append(ref.getTypeArgumentIndex());
break;
}
}
