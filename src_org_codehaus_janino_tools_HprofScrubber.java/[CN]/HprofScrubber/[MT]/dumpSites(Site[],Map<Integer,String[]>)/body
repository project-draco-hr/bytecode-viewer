{
  Arrays.sort(ss,new Comparator(){
    @Override public int compare(    Object o1,    Object o2){
      return ((Site)o2).allocatedBytes - ((Site)o1).allocatedBytes;
    }
  }
);
  int totalAllocatedBytes=0, totalAllocatedObjects=0;
  for (  Site site : ss) {
    totalAllocatedBytes+=site.allocatedBytes;
    totalAllocatedObjects+=site.allocatedObjects;
  }
  System.out.println("          percent          alloc'ed");
  System.out.println("rank   self  accum      bytes  objects  class name");
  System.out.println("Total:              " + totalAllocatedBytes + "  "+ totalAllocatedObjects);
  double accumulatedPercentage=0.0;
  MessageFormat mf=new MessageFormat("{0,number,00000} {1,number,00.00}% {2,number,00.00}% {3,number,000000000} {4,number,000000000} {5}");
  for (int i=0; i < ss.length; ++i) {
    Site site=ss[i];
    double selfPercentage=100.0 * ((double)site.allocatedBytes / (double)totalAllocatedBytes);
    accumulatedPercentage+=selfPercentage;
    System.out.println(mf.format(new Object[]{new Integer(i + 1),new Double(selfPercentage),new Double(accumulatedPercentage),new Integer(site.allocatedBytes),new Integer(site.allocatedObjects),site.className},new StringBuffer(),new FieldPosition(0)));
    String[] stackFrames=(String[])traces.get(new Integer(site.traceNumber));
    if (stackFrames != null) {
      for (      String stackFrame : stackFrames) {
        System.out.println("                           " + stackFrame);
      }
    }
  }
}
