{
  String fileName=args.length == 0 ? "java.hprof.txt" : args[0];
  BufferedReader br=new BufferedReader(new FileReader(fileName));
  try {
    Map<Integer,String[]> traces=new HashMap();
    List<Site> sites=new ArrayList();
    List<Sample> samples=new ArrayList();
    String s=br.readLine();
    while (s != null) {
      if (s.startsWith("SITES BEGIN")) {
        br.readLine();
        br.readLine();
        for (; ; ) {
          s=br.readLine();
          if (s.startsWith("SITES END"))           break;
          StringTokenizer st=new StringTokenizer(s);
          st.nextToken();
          st.nextToken();
          st.nextToken();
          st.nextToken();
          st.nextToken();
          sites.add(new Site(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()),st.nextToken()));
        }
      }
 else       if (s.startsWith("TRACE ") && s.endsWith(":")) {
        int traceNumber=Integer.parseInt(s.substring(6,s.length() - 1));
        List<String> l=new ArrayList();
        for (; ; ) {
          s=br.readLine();
          if (!s.startsWith("\t"))           break;
          l.add(s.substring(1));
        }
        traces.put(new Integer(traceNumber),(String[])l.toArray(new String[l.size()]));
      }
 else       if (s.startsWith("CPU SAMPLES BEGIN")) {
        br.readLine();
        for (; ; ) {
          s=br.readLine();
          if (s.startsWith("CPU SAMPLES END"))           break;
          StringTokenizer st=new StringTokenizer(s);
          st.nextToken();
          st.nextToken();
          st.nextToken();
          int count=Integer.parseInt(st.nextToken());
          if (count == 0)           continue;
          int trace=Integer.parseInt(st.nextToken());
          samples.add(new Sample(count,trace));
        }
      }
 else {
        s=br.readLine();
      }
    }
    HprofScrubber.dumpSites((Site[])sites.toArray(new Site[sites.size()]),traces);
    HprofScrubber.dumpSamples((Sample[])samples.toArray(new Sample[samples.size()]),traces);
  }
  finally {
    try {
      br.close();
    }
 catch (    IOException e) {
    }
  }
}
