{
  checkState();
  checkAccess(access,Opcodes.ACC_PUBLIC + Opcodes.ACC_PRIVATE + Opcodes.ACC_PROTECTED+ Opcodes.ACC_STATIC+ Opcodes.ACC_FINAL+ Opcodes.ACC_SYNCHRONIZED+ Opcodes.ACC_BRIDGE+ Opcodes.ACC_VARARGS+ Opcodes.ACC_NATIVE+ Opcodes.ACC_ABSTRACT+ Opcodes.ACC_STRICT+ Opcodes.ACC_SYNTHETIC+ Opcodes.ACC_DEPRECATED+ 0x40000);
  if (!"<init>".equals(name) && !"<clinit>".equals(name)) {
    CheckMethodAdapter.checkMethodIdentifier(version,name,"method name");
  }
  CheckMethodAdapter.checkMethodDesc(desc);
  if (signature != null) {
    checkMethodSignature(signature);
  }
  if (exceptions != null) {
    for (int i=0; i < exceptions.length; ++i) {
      CheckMethodAdapter.checkInternalName(exceptions[i],"exception name at index " + i);
    }
  }
  CheckMethodAdapter cma;
  if (checkDataFlow) {
    cma=new CheckMethodAdapter(access,name,desc,super.visitMethod(access,name,desc,signature,exceptions),labels);
  }
 else {
    cma=new CheckMethodAdapter(super.visitMethod(access,name,desc,signature,exceptions),labels);
  }
  cma.version=version;
  return cma;
}
