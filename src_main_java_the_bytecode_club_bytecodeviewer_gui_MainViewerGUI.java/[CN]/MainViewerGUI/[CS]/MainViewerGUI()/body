{
  Decompiler.ensureInitted();
  allDecompilers.put(panelGroup1,new HashMap<JRadioButtonMenuItem,Decompiler>());
  allDecompilers.put(panelGroup2,new HashMap<JRadioButtonMenuItem,Decompiler>());
  allDecompilers.put(panelGroup3,new HashMap<JRadioButtonMenuItem,Decompiler>());
  allDecompilersRev.put(panelGroup1,new HashMap<Decompiler,JRadioButtonMenuItem>());
  allDecompilersRev.put(panelGroup2,new HashMap<Decompiler,JRadioButtonMenuItem>());
  allDecompilersRev.put(panelGroup3,new HashMap<Decompiler,JRadioButtonMenuItem>());
  editButtons.put(panelGroup1,new HashMap<Decompiler,JCheckBoxMenuItem>());
  editButtons.put(panelGroup2,new HashMap<Decompiler,JCheckBoxMenuItem>());
  editButtons.put(panelGroup3,new HashMap<Decompiler,JCheckBoxMenuItem>());
  KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new Test());
  this.addWindowStateListener(new WindowAdapter(){
    @Override public void windowStateChanged(    WindowEvent evt){
      int oldState=evt.getOldState();
      int newState=evt.getNewState();
      if ((oldState & Frame.ICONIFIED) == 0 && (newState & Frame.ICONIFIED) != 0) {
      }
 else       if ((oldState & Frame.ICONIFIED) != 0 && (newState & Frame.ICONIFIED) == 0) {
      }
      if ((oldState & Frame.MAXIMIZED_BOTH) == 0 && (newState & Frame.MAXIMIZED_BOTH) != 0) {
        isMaximized=true;
      }
 else       if ((oldState & Frame.MAXIMIZED_BOTH) != 0 && (newState & Frame.MAXIMIZED_BOTH) == 0) {
        isMaximized=false;
      }
    }
  }
);
  this.setIconImages(Resources.iconList);
  JMenuBar menuBar=new JMenuBar();
  JMenu fileMenu=new JMenu("File");
  JMenu viewMenu=new JMenu("View");
  JMenu settingsMenu=new JMenu("Settings");
  JMenu obfuscateMenu=new JMenu("Obfuscate");
  JMenu pluginsMenu=new JMenu("Plugins");
  obfuscateMenu.setVisible(false);
  setJMenuBar(menuBar);
  obfuscatorGroup.add(strongObf);
  obfuscatorGroup.add(lightObf);
  obfuscatorGroup.setSelected(strongObf.getModel(),true);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  menuBar.add(fileMenu);
  mntmNewWorkspace.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      BytecodeViewer.resetWorkSpace(true);
    }
  }
);
  JMenuItem mntmLoadJar=new JMenuItem("Add..");
  mntmLoadJar.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fc=new JFileChooser();
      try {
        File f=new File(BytecodeViewer.lastDirectory);
        if (f.exists())         fc.setSelectedFile(f);
      }
 catch (      Exception e2) {
      }
      fc.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          if (f.isDirectory())           return true;
          String extension=MiscUtils.extension(f.getAbsolutePath());
          if (extension != null)           if (extension.equals("jar") || extension.equals("zip") || extension.equals("class")|| extension.equals("apk")|| extension.equals("dex"))           return true;
          return false;
        }
        @Override public String getDescription(){
          return "APKs, DEX, Class Files or Zip/Jar Archives";
        }
      }
);
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showOpenDialog(BytecodeViewer.viewer);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        BytecodeViewer.lastDirectory=fc.getSelectedFile().getAbsolutePath();
        try {
          BytecodeViewer.viewer.setIcon(true);
          BytecodeViewer.openFiles(new File[]{fc.getSelectedFile()},true);
          BytecodeViewer.viewer.setIcon(false);
        }
 catch (        Exception e1) {
          new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e1);
        }
      }
    }
  }
);
  fileMenu.add(mntmLoadJar);
  fileMenu.add(new JSeparator());
  fileMenu.add(mntmNewWorkspace);
  JMenuItem mntmSave=new JMenuItem("Save As Zip..");
  mntmSave.setActionCommand("");
  mntmSave.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedBytes().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      Thread t=new Thread(){
        public void run(){
          if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))           return;
          JFileChooser fc=new JFileChooser();
          fc.setFileFilter(new FileFilter(){
            @Override public boolean accept(            File f){
              return f.isDirectory() || MiscUtils.extension(f.getAbsolutePath()).equals("zip");
            }
            @Override public String getDescription(){
              return "Zip Archives";
            }
          }
);
          fc.setFileHidingEnabled(false);
          fc.setAcceptAllFileFilterUsed(false);
          int returnVal=fc.showSaveDialog(MainViewerGUI.this);
          if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file=fc.getSelectedFile();
            if (!file.getAbsolutePath().endsWith(".zip"))             file=new File(file.getAbsolutePath() + ".zip");
            if (file.exists()) {
              JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
              Object[] options=new String[]{"Yes","No"};
              pane.setOptions(options);
              JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
              dialog.setVisible(true);
              Object obj=pane.getValue();
              int result=-1;
              for (int k=0; k < options.length; k++)               if (options[k].equals(obj))               result=k;
              if (result == 0) {
                file.delete();
              }
 else {
                return;
              }
            }
            final File file2=file;
            BytecodeViewer.viewer.setIcon(true);
            Thread t=new Thread(){
              @Override public void run(){
                JarUtils.saveAsJar(BytecodeViewer.getLoadedBytes(),file2.getAbsolutePath());
                BytecodeViewer.viewer.setIcon(false);
              }
            }
;
            t.start();
          }
        }
      }
;
      t.start();
    }
  }
);
  fileMenu.add(new JSeparator());
  mntmReloadResources.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      JOptionPane pane=new JOptionPane("Are you sure you wish to reload the resources?");
      Object[] options=new String[]{"Yes","No"};
      pane.setOptions(options);
      JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Reload Resources");
      dialog.setVisible(true);
      Object obj=pane.getValue();
      int result=-1;
      for (int k=0; k < options.length; k++)       if (options[k].equals(obj))       result=k;
      if (result == 0) {
        ArrayList<File> reopen=new ArrayList<File>();
        for (        FileContainer container : BytecodeViewer.files)         reopen.add(container.file);
        BytecodeViewer.files.clear();
        BytecodeViewer.openFiles(reopen.toArray(new File[reopen.size()]),false);
      }
    }
  }
);
  fileMenu.add(mntmReloadResources);
  fileMenu.add(new JSeparator());
  mntmNewMenuItem_3.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (BytecodeViewer.getLoadedBytes().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      Thread t=new Thread(){
        public void run(){
          if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))           return;
          JFileChooser fc=new JFileChooser();
          fc.setFileFilter(new FileFilter(){
            @Override public boolean accept(            File f){
              return f.isDirectory() || MiscUtils.extension(f.getAbsolutePath()).equals("zip");
            }
            @Override public String getDescription(){
              return "Zip Archives";
            }
          }
);
          fc.setFileHidingEnabled(false);
          fc.setAcceptAllFileFilterUsed(false);
          int returnVal=fc.showSaveDialog(MainViewerGUI.this);
          if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file=fc.getSelectedFile();
            String path=file.getAbsolutePath();
            if (!path.endsWith(".jar"))             path=path + ".jar";
            if (new File(path).exists()) {
              JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
              Object[] options=new String[]{"Yes","No"};
              pane.setOptions(options);
              JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
              dialog.setVisible(true);
              Object obj=pane.getValue();
              int result=-1;
              for (int k=0; k < options.length; k++)               if (options[k].equals(obj))               result=k;
              if (result == 0) {
                file.delete();
              }
 else {
                return;
              }
            }
            new ExportJar(path).setVisible(true);
          }
        }
      }
;
      t.start();
    }
  }
);
  mntmNewMenuItem_13.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      Thread t=new Thread(){
        public void run(){
          BytecodeViewer.compile(true);
        }
      }
;
      t.start();
    }
  }
);
  mntmRun.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (BytecodeViewer.getLoadedBytes().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      new RunOptions().setVisible(true);
    }
  }
);
  fileMenu.add(mntmRun);
  fileMenu.add(mntmNewMenuItem_13);
  fileMenu.add(new JSeparator());
  fileMenu.add(mntmNewMenuItem_3);
  mntmSaveAsApk.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedBytes().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      Thread t=new Thread(){
        public void run(){
          if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))           return;
          JFileChooser fc=new JFileChooser();
          fc.setFileFilter(new FileFilter(){
            @Override public boolean accept(            File f){
              return f.isDirectory() || MiscUtils.extension(f.getAbsolutePath()).equals("dex");
            }
            @Override public String getDescription(){
              return "Android DEX Files";
            }
          }
);
          fc.setFileHidingEnabled(false);
          fc.setAcceptAllFileFilterUsed(false);
          int returnVal=fc.showSaveDialog(MainViewerGUI.this);
          if (returnVal == JFileChooser.APPROVE_OPTION) {
            final File file=fc.getSelectedFile();
            String output=file.getAbsolutePath();
            if (!output.endsWith(".dex"))             output=output + ".dex";
            final File file2=new File(output);
            if (file2.exists()) {
              JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
              Object[] options=new String[]{"Yes","No"};
              pane.setOptions(options);
              JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
              dialog.setVisible(true);
              Object obj=pane.getValue();
              int result=-1;
              for (int k=0; k < options.length; k++)               if (options[k].equals(obj))               result=k;
              if (result == 0) {
                file.delete();
              }
 else {
                return;
              }
            }
            Thread t=new Thread(){
              @Override public void run(){
                BytecodeViewer.viewer.setIcon(true);
                final String input=BytecodeViewer.tempDir.getAbsolutePath() + BytecodeViewer.fs + BytecodeViewer.getRandomizedName()+ ".jar";
                JarUtils.saveAsJar(BytecodeViewer.getLoadedBytes(),input);
                Thread t=new Thread(){
                  @Override public void run(){
                    Dex2Jar.saveAsDex(new File(input),file2);
                    BytecodeViewer.viewer.setIcon(false);
                  }
                }
;
                t.start();
              }
            }
;
            t.start();
          }
        }
      }
;
      t.start();
    }
  }
);
  fileMenu.add(mntmSaveAsApk);
  fileMenu.add(mntmSave);
  mntmNewMenuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.files.isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      Thread t=new Thread(){
        public void run(){
          if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))           return;
          JFileChooser fc=new JFileChooser();
          fc.setFileFilter(new FileFilter(){
            @Override public boolean accept(            File f){
              return f.isDirectory() || MiscUtils.extension(f.getAbsolutePath()).equals("zip");
            }
            @Override public String getDescription(){
              return "Zip Archives";
            }
          }
);
          fc.setFileHidingEnabled(false);
          fc.setAcceptAllFileFilterUsed(false);
          int returnVal=fc.showSaveDialog(MainViewerGUI.this);
          if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file=fc.getSelectedFile();
            if (!file.getAbsolutePath().endsWith(".zip"))             file=new File(file.getAbsolutePath() + ".zip");
            if (file.exists()) {
              JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
              Object[] options=new String[]{"Yes","No"};
              pane.setOptions(options);
              JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
              dialog.setVisible(true);
              Object obj=pane.getValue();
              int result=-1;
              for (int k=0; k < options.length; k++)               if (options[k].equals(obj))               result=k;
              if (result == 0) {
                file.delete();
              }
 else {
                return;
              }
            }
            BytecodeViewer.viewer.setIcon(true);
            final String path=MiscUtils.append(file,".zip");
            JOptionPane pane=new JOptionPane("What decompiler will you use?");
            Object[] options=new String[]{"Procyon","CFR","Fernflower","Krakatau","JD-GUI","Cancel"};
            pane.setOptions(options);
            JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Select Decompiler");
            dialog.setVisible(true);
            Object obj=pane.getValue();
            int result=-1;
            for (int k=0; k < options.length; k++)             if (options[k].equals(obj))             result=k;
            if (result == 0) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    Decompiler.PROCYON.decompileToZip(path);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
            if (result == 1) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    Decompiler.CFR.decompileToZip(path);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
            if (result == 2) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    Decompiler.FERNFLOWER.decompileToZip(path);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
            if (result == 3) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    Decompiler.KRAKATAU.decompileToZip(path);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
 else             if (result == 4) {
              new Thread(){
                @Override public void run(){
                  try {
                    Decompiler.JDGUI.decompileToZip(path);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
.start();
            }
 else {
              BytecodeViewer.viewer.setIcon(false);
            }
          }
        }
      }
;
      t.start();
    }
  }
);
  mntmNewMenuItem_12.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (workPane.getCurrentViewer() == null) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      Thread t=new Thread(){
        public void run(){
          if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))           return;
          final String s=workPane.getCurrentViewer().name;
          JFileChooser fc=new JFileChooser();
          fc.setFileFilter(new FileFilter(){
            @Override public boolean accept(            File f){
              return f.isDirectory() || MiscUtils.extension(f.getAbsolutePath()).equals("java");
            }
            @Override public String getDescription(){
              return "Java Source Files";
            }
          }
);
          fc.setFileHidingEnabled(false);
          fc.setAcceptAllFileFilterUsed(false);
          int returnVal=fc.showSaveDialog(MainViewerGUI.this);
          if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file=fc.getSelectedFile();
            BytecodeViewer.viewer.setIcon(true);
            final String path=MiscUtils.append(file,".java");
            if (new File(path).exists()) {
              JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
              Object[] options=new String[]{"Yes","No"};
              pane.setOptions(options);
              JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
              dialog.setVisible(true);
              Object obj=pane.getValue();
              int result=-1;
              for (int k=0; k < options.length; k++)               if (options[k].equals(obj))               result=k;
              if (result == 0) {
                file.delete();
              }
 else {
                return;
              }
            }
            JOptionPane pane=new JOptionPane("What decompiler will you use?");
            Object[] options=new String[]{"Procyon","CFR","Fernflower","Krakatau","Cancel"};
            pane.setOptions(options);
            JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Select Decompiler");
            dialog.setVisible(true);
            Object obj=pane.getValue();
            int result=-1;
            for (int k=0; k < options.length; k++)             if (options[k].equals(obj))             result=k;
            String containerName=BytecodeViewer.files.get(0).name;
            if (result == 0) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    ClassNode cn=BytecodeViewer.getClassNode(containerName,s);
                    byte[] bytes=BytecodeViewer.getClassBytes(containerName,s);
                    String contents=Decompiler.PROCYON.decompileClassNode(cn,bytes);
                    FileUtils.write(new File(path),contents,"UTF-8",false);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
            if (result == 1) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    ClassNode cn=BytecodeViewer.getClassNode(containerName,s);
                    byte[] bytes=BytecodeViewer.getClassBytes(containerName,s);
                    String contents=Decompiler.CFR.decompileClassNode(cn,bytes);
                    FileUtils.write(new File(path),contents,"UTF-8",false);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
            if (result == 2) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    ClassNode cn=BytecodeViewer.getClassNode(containerName,s);
                    byte[] bytes=BytecodeViewer.getClassBytes(containerName,s);
                    String contents=Decompiler.FERNFLOWER.decompileClassNode(cn,bytes);
                    FileUtils.write(new File(path),contents,"UTF-8",false);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
            if (result == 3) {
              Thread t=new Thread(){
                @Override public void run(){
                  try {
                    ClassNode cn=BytecodeViewer.getClassNode(containerName,s);
                    byte[] bytes=BytecodeViewer.getClassBytes(containerName,s);
                    String contents=Decompiler.KRAKATAU.decompileClassNode(cn,bytes);
                    FileUtils.write(new File(path),contents,"UTF-8",false);
                    BytecodeViewer.viewer.setIcon(false);
                  }
 catch (                  Exception e) {
                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
                  }
                }
              }
;
              t.start();
            }
            if (result == 4) {
              BytecodeViewer.viewer.setIcon(false);
            }
          }
        }
      }
;
      t.start();
    }
  }
);
  fileMenu.add(mntmNewMenuItem_12);
  fileMenu.add(mntmNewMenuItem);
  fileMenu.add(new JSeparator());
  fileMenu.add(mnRecentFiles);
  fileMenu.add(new JSeparator());
  mntmAbout.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      aboutWindow.setVisible(true);
    }
  }
);
  fileMenu.add(mntmAbout);
  JMenuItem mntmExit=new JMenuItem("Exit");
  mntmExit.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      JOptionPane pane=new JOptionPane("Are you sure you want to exit?");
      Object[] options=new String[]{"Yes","No"};
      pane.setOptions(options);
      JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Exit");
      dialog.setVisible(true);
      Object obj=pane.getValue();
      int result=-1;
      for (int k=0; k < options.length; k++)       if (options[k].equals(obj))       result=k;
      if (result == 0) {
        System.exit(0);
      }
    }
  }
);
  mntmPingback.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      BytecodeViewer.pingback();
    }
  }
);
  fileMenu.add(mntmPingback);
  fileMenu.add(mntmExit);
  menuBar.add(viewMenu);
  viewMenu.add(generatePane(0));
  viewMenu.add(generatePane(1));
  viewMenu.add(generatePane(2));
  autoCompileSmali.setSelected(true);
  settingsMenu.add(autoCompileSmali);
  autoCompileOnRefresh.setSelected(true);
  settingsMenu.add(autoCompileOnRefresh);
  settingsMenu.add(refreshOnChange);
  settingsMenu.add(new JSeparator());
  decodeAPKResources.setSelected(true);
  settingsMenu.add(decodeAPKResources);
  settingsMenu.add(mnApkConversion);
  mnApkConversion.add(apkConversionDex);
  mnApkConversion.add(apkConversionEnjarify);
  settingsMenu.add(new JSeparator());
  chckbxmntmNewCheckItem_12.setSelected(true);
  settingsMenu.add(chckbxmntmNewCheckItem_12);
  chckbxmntmDeleteForiegnoutdatedLibs.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (!chckbxmntmDeleteForiegnoutdatedLibs.isSelected()) {
        BytecodeViewer.showMessage("WARNING: With this being toggled off outdated libraries will NOT be removed. It's also a security issue. ONLY TURN IT OFF IF YOU KNOW WHAT YOU'RE DOING.");
      }
      BytecodeViewer.deleteForiegnLibraries=chckbxmntmDeleteForiegnoutdatedLibs.isSelected();
    }
  }
);
  chckbxmntmDeleteForiegnoutdatedLibs.setSelected(true);
  settingsMenu.add(chckbxmntmDeleteForiegnoutdatedLibs);
  settingsMenu.add(new JSeparator());
  mntmSetPythonDirectory.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      pythonC();
    }
  }
);
  settingsMenu.add(mntmSetPythonDirectory);
  mntmSetJreRt.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      rtC();
    }
  }
);
  mntmSetPythonx.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      pythonC3();
    }
  }
);
  settingsMenu.add(mntmSetPythonx);
  settingsMenu.add(mntmSetJreRt);
  mntmSetOpitonalLibrary.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      library();
    }
  }
);
  settingsMenu.add(mntmSetOpitonalLibrary);
  mntmSetJavacExecutable.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      javac();
    }
  }
);
  settingsMenu.add(mntmSetJavacExecutable);
  settingsMenu.add(new JSeparator());
  JMenu cfrSettingsMenu=new JMenu("CFR");
  DecompilerSettings cfrSettings=Decompiler.CFR.getSettings();
  for (  CFRDecompiler.Settings setting : CFRDecompiler.Settings.values()) {
    cfrSettingsMenu.add(cfrSettings.getMenuItem(setting));
  }
  settingsMenu.add(cfrSettingsMenu);
  JMenu fernflowerSettingMenu=new JMenu("FernFlower");
  DecompilerSettings fernflowerSettings=Decompiler.FERNFLOWER.getSettings();
  for (  FernFlowerDecompiler.Settings setting : FernFlowerDecompiler.Settings.values()) {
    fernflowerSettingMenu.add(fernflowerSettings.getMenuItem(setting));
  }
  settingsMenu.add(fernflowerSettingMenu);
  JMenu procyonSettingsMenu=new JMenu("Procyon");
  DecompilerSettings procyonSettings=Decompiler.PROCYON.getSettings();
  for (  ProcyonDecompiler.Settings setting : ProcyonDecompiler.Settings.values()) {
    procyonSettingsMenu.add(procyonSettings.getMenuItem(setting));
  }
  settingsMenu.add(procyonSettingsMenu);
  JMenu bytecodeSettingsMenu=new JMenu("Bytecode Decompiler");
  DecompilerSettings bytecodeSettings=Decompiler.BYTECODE.getSettings();
  for (  ClassNodeDecompiler.Settings setting : ClassNodeDecompiler.Settings.values()) {
    bytecodeSettingsMenu.add(bytecodeSettings.getMenuItem(setting));
  }
  settingsMenu.add(bytecodeSettingsMenu);
  menuBar.add(settingsMenu);
  menuBar.add(obfuscateMenu);
  mntmNewMenuItem_6.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.runningObfuscation) {
        BytecodeViewer.showMessage("You're currently running an obfuscation task, wait for this to finish.");
        return;
      }
      new RenameFields().start();
      workPane.refreshClass.doClick();
      cn.tree.updateUI();
    }
  }
);
  obfuscateMenu.add(strongObf);
  obfuscateMenu.add(lightObf);
  obfuscateMenu.add(new JSeparator());
  mntmNewMenuItem_8.setEnabled(false);
  obfuscateMenu.add(mntmNewMenuItem_8);
  obfuscateMenu.add(mntmNewMenuItem_6);
  mntmNewMenuItem_7.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.runningObfuscation) {
        BytecodeViewer.showMessage("You're currently running an obfuscation task, wait for this to finish.");
        return;
      }
      new RenameMethods().start();
      workPane.refreshClass.doClick();
      cn.tree.updateUI();
    }
  }
);
  obfuscateMenu.add(mntmNewMenuItem_7);
  mntmNewMenuItem_11.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.runningObfuscation) {
        BytecodeViewer.showMessage("You're currently running an obfuscation task, wait for this to finish.");
        return;
      }
      new RenameClasses().start();
      workPane.refreshClass.doClick();
      cn.tree.updateUI();
    }
  }
);
  obfuscateMenu.add(mntmNewMenuItem_11);
  mntmNewMenuItem_9.setEnabled(false);
  obfuscateMenu.add(mntmNewMenuItem_9);
  mntmNewMenuItem_10.setEnabled(false);
  obfuscateMenu.add(mntmNewMenuItem_10);
  menuBar.add(pluginsMenu);
  pluginsMenu.add(mntmStartExternalPlugin);
  pluginsMenu.add(new JSeparator());
  pluginsMenu.add(mnRecentPlugins);
  pluginsMenu.add(new JSeparator());
  mntmCodeSequenceDiagram.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      PluginManager.runPlugin(new CodeSequenceDiagram());
    }
  }
);
  pluginsMenu.add(mntmCodeSequenceDiagram);
  pluginsMenu.add(mntmNewMenuItem_1);
  pluginsMenu.add(mntmShowMainMethods);
  pluginsMenu.add(mntmShowAllStrings);
  mntmReplaceStrings.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      new ReplaceStringsOptions().setVisible(true);
    }
  }
);
  pluginsMenu.add(mntmReplaceStrings);
  pluginsMenu.add(mntmNewMenuItem_2);
  pluginsMenu.add(mntmStartZkmString);
  mntmZstringarrayDecrypter.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      PluginManager.runPlugin(new ZStringArrayDecrypter());
    }
  }
);
  pluginsMenu.add(mntmZstringarrayDecrypter);
  menuBar.add(spinnerMenu);
  mntmStartExternalPlugin.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      JFileChooser fc=new JFileChooser();
      fc.setFileFilter(PluginManager.fileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showOpenDialog(BytecodeViewer.viewer);
      if (returnVal == JFileChooser.APPROVE_OPTION)       try {
        BytecodeViewer.viewer.setIcon(true);
        BytecodeViewer.startPlugin(fc.getSelectedFile());
        BytecodeViewer.viewer.setIcon(false);
      }
 catch (      Exception e1) {
        new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e1);
      }
    }
  }
);
  mntmStartZkmString.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      PluginManager.runPlugin(new ZKMStringDecrypter());
    }
  }
);
  mntmNewMenuItem_2.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      new AllatoriStringDecrypterOptions().setVisible(true);
    }
  }
);
  mntmNewMenuItem_1.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      new MaliciousCodeScannerOptions().setVisible(true);
    }
  }
);
  mntmShowAllStrings.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      PluginManager.runPlugin(new ShowAllStrings());
    }
  }
);
  mntmShowMainMethods.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      PluginManager.runPlugin(new ShowMainMethods());
    }
  }
);
  setSize(new Dimension(800,400));
  if (BytecodeViewer.previewCopy)   setTitle("Bytecode Viewer " + BytecodeViewer.version + " Preview - https://bytecodeviewer.com | https://the.bytecode.club - @Konloch");
 else   setTitle("Bytecode Viewer " + BytecodeViewer.version + " - https://bytecodeviewer.com | https://the.bytecode.club - @Konloch");
  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.X_AXIS));
  cn.setMinimumSize(new Dimension(200,50));
  SearchingPane s=new SearchingPane(this);
  s.setPreferredSize(new Dimension(200,50));
  s.setMinimumSize(new Dimension(200,50));
  s.setMaximumSize(new Dimension(200,2147483647));
  sp1=new JSplitPane(JSplitPane.VERTICAL_SPLIT,cn,s);
  cn.setPreferredSize(new Dimension(200,50));
  cn.setMaximumSize(new Dimension(200,2147483647));
  sp2=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,sp1,workPane);
  getContentPane().add(sp2);
  sp2.setResizeWeight(0.05);
  sp1.setResizeWeight(0.5);
  rfComps.add(cn);
  rfComps.add(s);
  rfComps.add(workPane);
  apkConversionGroup.add(apkConversionDex);
  apkConversionGroup.add(apkConversionEnjarify);
  apkConversionGroup.setSelected(apkConversionDex.getModel(),true);
  fontSpinner.setPreferredSize(new Dimension(42,20));
  fontSpinner.setSize(new Dimension(42,20));
  fontSpinner.setModel(new SpinnerNumberModel(12,1,null,1));
  viewMenu.add(mnFontSize);
  mnFontSize.add(fontSpinner);
  viewMenu.add(mnShowContainer);
  mnShowContainer.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      JTabbedPane tabs=workPane.tabs;
      Component[] components=tabs.getComponents();
      for (int i=0; i < components.length; i++) {
        Component c=components[i];
        if (c instanceof Viewer) {
          ((Viewer)c).updateName();
          int idx=tabs.indexOfComponent(c);
          tabs.setTabComponentAt(idx,new TabbedPane(c.getName(),tabs));
          workPane.tabs.setTitleAt(idx,c.getName());
        }
      }
    }
  }
);
  panelGroup1.setSelected(allDecompilersRev.get(panelGroup1).get(Decompiler.JDGUI).getModel(),true);
  panelGroup2.setSelected(allDecompilersRev.get(panelGroup2).get(Decompiler.BYTECODE).getModel(),true);
  panelGroup3.setSelected(allDecompilersRev.get(panelGroup3).get(null).getModel(),true);
  this.setLocationRelativeTo(null);
}
