{
  if (Settings.PYTHON2_LOCATION.isEmpty()) {
    BytecodeViewer.showMessage("You need to set your Python (or PyPy for speed) 2.7 executable path.");
    BytecodeViewer.viewer.pythonC();
  }
  if (Settings.RT_LOCATION.isEmpty()) {
    BytecodeViewer.showMessage("You need to set your JRE RT Library.\r\n(C:\\Program Files (x86)\\Java\\jre7\\lib\\rt.jar)");
    BytecodeViewer.viewer.rtC();
  }
  if (Settings.PYTHON2_LOCATION.isEmpty()) {
    BytecodeViewer.showMessage("You need to set Python!");
    return "Set your paths";
  }
  if (Settings.RT_LOCATION.isEmpty()) {
    BytecodeViewer.showMessage("You need to set RT.jar!");
    return "Set your paths";
  }
  String s="Bytecode Viewer Version: " + BytecodeViewer.version + BytecodeViewer.nl+ BytecodeViewer.nl+ "Please send this to konloch@gmail.com. "+ BytecodeViewer.nl+ BytecodeViewer.nl;
  try {
    final Path outputJar=Files.createTempFile("kdeout",".zip");
    final Path inputJar=Files.createTempFile("kdein",".jar");
    JarUtils.saveAsJarClassesOnly(BytecodeViewer.getLoadedBytes(),inputJar.toAbsolutePath().toString());
    BytecodeViewer.sm.stopBlocking();
    ProcessBuilder pb=new ProcessBuilder(Settings.PYTHON2_LOCATION.get(),"-O",BytecodeViewer.krakatauDirectory.getAbsolutePath() + BytecodeViewer.fs + "decompile.py","-skip","-nauto","-path",Settings.RT_LOCATION.get() + ";" + inputJar.toAbsolutePath().toString()+ quick(),"-out",outputJar.toAbsolutePath().toString(),cn.name + ".class");
    Process process=pb.start();
    BytecodeViewer.createdProcesses.add(process);
    InputStream is=process.getInputStream();
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String log="Process:" + BytecodeViewer.nl + BytecodeViewer.nl;
    String line;
    while ((line=br.readLine()) != null) {
      log+=BytecodeViewer.nl + line;
    }
    br.close();
    log+=BytecodeViewer.nl + BytecodeViewer.nl + "Error:"+ BytecodeViewer.nl+ BytecodeViewer.nl;
    is=process.getErrorStream();
    isr=new InputStreamReader(is);
    br=new BufferedReader(isr);
    while ((line=br.readLine()) != null) {
      log+=BytecodeViewer.nl + line;
    }
    br.close();
    int exitValue=process.waitFor();
    log+=BytecodeViewer.nl + BytecodeViewer.nl + "Exit Value is "+ exitValue;
    s=log;
    ZipFile zipFile=new ZipFile(outputJar.toFile());
    Enumeration<? extends ZipEntry> entries=zipFile.entries();
    byte[] data=null;
    while (entries.hasMoreElements()) {
      ZipEntry next=entries.nextElement();
      if (next.getName().equals(cn.name + ".java")) {
        data=IOUtils.toByteArray(zipFile.getInputStream(next));
      }
    }
    zipFile.close();
    Files.delete(inputJar);
    Files.delete(outputJar);
    return new String(data,"UTF-8");
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    e.printStackTrace();
    s+=BytecodeViewer.nl + "Bytecode Viewer Version: " + BytecodeViewer.version+ BytecodeViewer.nl+ BytecodeViewer.nl+ sw.toString();
  }
 finally {
    BytecodeViewer.sm.setBlocking();
  }
  return s;
}
