{
  if (clazz == null)   return null;
  return new Java.Type(location){
    private Java.SimpleType delegate;
    @Override public String toString(){
      return this.getDelegate().toString();
    }
    @Override public void accept(    AtomVisitor visitor){
      this.getDelegate().accept((TypeVisitor)visitor);
    }
    @Override public void accept(    TypeVisitor visitor){
      this.getDelegate().accept(visitor);
    }
    private Type getDelegate(){
      if (this.delegate == null) {
        IClass iClass;
        try {
          iClass=SimpleCompiler.this.classLoaderIClassLoader.loadIClass(Descriptor.fromClassName(clazz.getName()));
        }
 catch (        ClassNotFoundException ex) {
          throw new JaninoRuntimeException("Loading IClass \"" + clazz.getName() + "\": "+ ex);
        }
        if (iClass == null) {
          throw new JaninoRuntimeException("Cannot load class '" + clazz.getName() + "' through the parent loader");
        }
        IClass iClass2=iClass;
        Class class2=clazz;
        for (; ; ) {
          IClass ct=iClass2.getComponentType();
          if (ct == null) {
            if (class2.getComponentType() != null) {
              throw new JaninoRuntimeException("Array type/class inconsistency");
            }
            break;
          }
          iClass2=ct;
          class2=class2.getComponentType();
          if (class2 == null)           throw new JaninoRuntimeException("Array type/class inconsistency");
        }
        if (class2.isPrimitive()) {
          if (!iClass2.isPrimitive()) {
            throw new JaninoRuntimeException("Primitive type/class inconsistency");
          }
        }
 else {
          if (iClass2.isPrimitive()) {
            throw new JaninoRuntimeException("Primitive type/class inconsistency");
          }
          if (((ReflectionIClass)iClass2).getClazz() != class2) {
            throw new JaninoRuntimeException("Class '" + class2.getName() + "' was loaded through a different loader");
          }
        }
        this.delegate=new Java.SimpleType(location,iClass);
      }
      return this.delegate;
    }
  }
;
}
