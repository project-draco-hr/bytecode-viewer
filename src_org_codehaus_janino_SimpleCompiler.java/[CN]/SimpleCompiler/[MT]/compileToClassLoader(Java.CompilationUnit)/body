{
  if (SimpleCompiler.DEBUG) {
    UnparseVisitor.unparse(compilationUnit,new OutputStreamWriter(System.out));
  }
  this.classLoaderIClassLoader=new ClassLoaderIClassLoader(this.parentClassLoader);
  UnitCompiler unitCompiler=new UnitCompiler(compilationUnit,this.classLoaderIClassLoader);
  unitCompiler.setCompileErrorHandler(this.optionalCompileErrorHandler);
  unitCompiler.setWarningHandler(this.optionalWarningHandler);
  ClassFile[] classFiles=unitCompiler.compileUnit(this.debugSource,this.debugLines,this.debugVars);
  final Map<String,byte[]> classes=new HashMap();
  for (  ClassFile cf : classFiles) {
    byte[] contents=cf.toByteArray();
    if (SimpleCompiler.DEBUG) {
      try {
        Class disassemblerClass=Class.forName("de.unkrig.jdisasm.Disassembler");
        disassemblerClass.getMethod("disasm",new Class[]{InputStream.class}).invoke(disassemblerClass.newInstance(),new Object[]{new ByteArrayInputStream(contents)});
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    classes.put(cf.getThisClassName(),contents);
  }
  this.result=(ClassLoader)AccessController.doPrivileged(new PrivilegedAction(){
    @Override public Object run(){
      return new ByteArrayClassLoader(classes,SimpleCompiler.this.parentClassLoader);
    }
  }
);
  return this.result;
}
