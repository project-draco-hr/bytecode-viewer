{
  if (context.eof) {
    return;
  }
  if (inAvail < 0) {
    context.eof=true;
    if (0 == context.modulus && lineLength == 0) {
      return;
    }
    final byte[] buffer=ensureBufferSize(encodeSize,context);
    final int savedPos=context.pos;
switch (context.modulus) {
case 0:
      break;
case 1:
    buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS];
  buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS];
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
break;
case 2:
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 6) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 1) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea << 4) & MASK_5BITS];
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
break;
case 3:
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 9) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 4) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea << 1) & MASK_5BITS];
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
buffer[context.pos++]=pad;
break;
case 4:
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 7) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 2) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea << 3) & MASK_5BITS];
buffer[context.pos++]=pad;
break;
default :
throw new IllegalStateException("Impossible modulus " + context.modulus);
}
context.currentLinePos+=context.pos - savedPos;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);
context.pos+=lineSeparator.length;
}
}
 else {
for (int i=0; i < inAvail; i++) {
final byte[] buffer=ensureBufferSize(encodeSize,context);
context.modulus=(context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b=in[inPos++];
if (b < 0) {
b+=256;
}
context.lbitWorkArea=(context.lbitWorkArea << 8) + b;
if (0 == context.modulus) {
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 35) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 30) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 25) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 20) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 15) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 10) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)(context.lbitWorkArea >> 5) & MASK_5BITS];
buffer[context.pos++]=encodeTable[(int)context.lbitWorkArea & MASK_5BITS];
context.currentLinePos+=BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);
context.pos+=lineSeparator.length;
context.currentLinePos=0;
}
}
}
}
}
