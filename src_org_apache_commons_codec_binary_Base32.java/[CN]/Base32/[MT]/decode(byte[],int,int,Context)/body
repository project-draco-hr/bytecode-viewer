{
  if (context.eof) {
    return;
  }
  if (inAvail < 0) {
    context.eof=true;
  }
  for (int i=0; i < inAvail; i++) {
    final byte b=in[inPos++];
    if (b == pad) {
      context.eof=true;
      break;
    }
 else {
      final byte[] buffer=ensureBufferSize(decodeSize,context);
      if (b >= 0 && b < this.decodeTable.length) {
        final int result=this.decodeTable[b];
        if (result >= 0) {
          context.modulus=(context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;
          context.lbitWorkArea=(context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;
          if (context.modulus == 0) {
            buffer[context.pos++]=(byte)((context.lbitWorkArea >> 32) & MASK_8BITS);
            buffer[context.pos++]=(byte)((context.lbitWorkArea >> 24) & MASK_8BITS);
            buffer[context.pos++]=(byte)((context.lbitWorkArea >> 16) & MASK_8BITS);
            buffer[context.pos++]=(byte)((context.lbitWorkArea >> 8) & MASK_8BITS);
            buffer[context.pos++]=(byte)(context.lbitWorkArea & MASK_8BITS);
          }
        }
      }
    }
  }
  if (context.eof && context.modulus >= 2) {
    final byte[] buffer=ensureBufferSize(decodeSize,context);
switch (context.modulus) {
case 2:
      buffer[context.pos++]=(byte)((context.lbitWorkArea >> 2) & MASK_8BITS);
    break;
case 3:
  buffer[context.pos++]=(byte)((context.lbitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
context.lbitWorkArea=context.lbitWorkArea >> 4;
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 8) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea) & MASK_8BITS);
break;
case 5:
context.lbitWorkArea=context.lbitWorkArea >> 1;
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 16) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 8) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea) & MASK_8BITS);
break;
case 6:
context.lbitWorkArea=context.lbitWorkArea >> 6;
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 16) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 8) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea) & MASK_8BITS);
break;
case 7:
context.lbitWorkArea=context.lbitWorkArea >> 3;
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 24) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 16) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea >> 8) & MASK_8BITS);
buffer[context.pos++]=(byte)((context.lbitWorkArea) & MASK_8BITS);
break;
default :
throw new IllegalStateException("Impossible modulus " + context.modulus);
}
}
}
