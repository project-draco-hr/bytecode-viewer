{
  DataInputStream dis=null;
  String directoryPath=null;
  try {
    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(pathToClass)));
    int magic=dis.readInt();
    if (magic != CoreConstants.JAVA_MAGIC_NUMBER)     throw new ClassFormatException("Invalid Java .class file");
    dis.readUnsignedShort();
    dis.readUnsignedShort();
    Constant[] constants=DeserializeConstants(dis);
    dis.readUnsignedShort();
    int this_class=dis.readUnsignedShort();
    Constant c=constants[this_class];
    if ((c == null) || (c.tag != ConstantConstant.CONSTANT_Class))     throw new ClassFormatException("Invalid contant pool");
    c=constants[((ConstantClass)c).name_index];
    if ((c == null) || (c.tag != ConstantConstant.CONSTANT_Utf8))     throw new ClassFormatException("Invalid contant pool");
    String internalClassName=((ConstantUtf8)c).bytes;
    String pathSuffix=internalClassName.replace(StringConstants.INTERNAL_PACKAGE_SEPARATOR,File.separatorChar) + StringConstants.CLASS_FILE_SUFFIX;
    int index=pathToClass.indexOf(pathSuffix);
    if (index < 0)     throw new ClassFormatException("Invalid internal class name");
    directoryPath=pathToClass.substring(0,index);
  }
 catch (  FileNotFoundException e) {
    directoryPath=null;
    e.printStackTrace();
  }
catch (  IOException e) {
    directoryPath=null;
    e.printStackTrace();
  }
 finally {
    if (dis != null)     try {
      dis.close();
    }
 catch (    IOException e) {
    }
  }
  return directoryPath;
}
