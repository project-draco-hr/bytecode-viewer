{
  final IClass componentType=this;
  return new IClass(){
    @Override public IClass.IConstructor[] getDeclaredIConstructors2(){
      return new IClass.IConstructor[0];
    }
    @Override public IClass.IMethod[] getDeclaredIMethods2(){
      return new IClass.IMethod[]{new IMethod(){
        @Override public String getName(){
          return "clone";
        }
        @Override public IClass getReturnType(){
          return objectType;
        }
        @Override public boolean isAbstract(){
          return false;
        }
        @Override public boolean isStatic(){
          return false;
        }
        @Override public Access getAccess(){
          return Access.PUBLIC;
        }
        @Override public boolean isVarargs(){
          return false;
        }
        @Override public IClass[] getParameterTypes2(){
          return new IClass[0];
        }
        @Override public IClass[] getThrownExceptions2(){
          return new IClass[0];
        }
        @Override public Annotation[] getAnnotations(){
          return new Annotation[0];
        }
      }
};
    }
    @Override public IClass.IField[] getDeclaredIFields2(){
      return new IClass.IField[0];
    }
    @Override public IClass[] getDeclaredIClasses2(){
      return new IClass[0];
    }
    @Override public IClass getDeclaringIClass2(){
      return null;
    }
    @Override public IClass getOuterIClass2(){
      return null;
    }
    @Override public IClass getSuperclass2(){
      return objectType;
    }
    @Override public IClass[] getInterfaces2(){
      return new IClass[0];
    }
    @Override public String getDescriptor2(){
      return '[' + componentType.getDescriptor();
    }
    @Override public Access getAccess(){
      return componentType.getAccess();
    }
    @Override public boolean isFinal(){
      return true;
    }
    @Override public boolean isInterface(){
      return false;
    }
    @Override public boolean isAbstract(){
      return false;
    }
    @Override public boolean isArray(){
      return true;
    }
    @Override public boolean isPrimitive(){
      return false;
    }
    @Override public boolean isPrimitiveNumeric(){
      return false;
    }
    @Override public IClass getComponentType2(){
      return componentType;
    }
    @Override public String toString(){
      return componentType.toString() + "[]";
    }
  }
;
}
