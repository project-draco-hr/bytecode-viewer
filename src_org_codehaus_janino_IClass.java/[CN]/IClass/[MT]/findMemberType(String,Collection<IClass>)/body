{
  IClass[] memberTypes=this.getDeclaredIClasses();
  if (optionalName == null) {
    result.addAll(Arrays.asList(memberTypes));
  }
 else {
    String memberDescriptor=Descriptor.fromClassName(Descriptor.toClassName(this.getDescriptor()) + '$' + optionalName);
    for (    final IClass mt : memberTypes) {
      if (mt.getDescriptor().equals(memberDescriptor)) {
        result.add(mt);
        return;
      }
    }
  }
{
    IClass superclass=this.getSuperclass();
    if (superclass != null)     superclass.findMemberType(optionalName,result);
  }
  for (  IClass i : this.getInterfaces())   i.findMemberType(optionalName,result);
{
    IClass declaringIClass=this.getDeclaringIClass();
    IClass outerIClass=this.getOuterIClass();
    if (declaringIClass != null) {
      declaringIClass.findMemberType(optionalName,result);
    }
    if (outerIClass != null && outerIClass != declaringIClass) {
      outerIClass.findMemberType(optionalName,result);
    }
  }
}
