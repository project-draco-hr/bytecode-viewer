{
  Location location=this.location();
  String interfaceName=this.readIdentifier();
  this.verifyIdentifierIsConventionalClassOrInterfaceName(interfaceName,location);
  TypeParameter[] optionalTypeParameters=this.parseTypeParametersOpt();
  ReferenceType[] extendedTypes=new ReferenceType[0];
  if (this.peekRead("extends")) {
    extendedTypes=this.parseReferenceTypeList();
  }
  InterfaceDeclaration interfaceDeclaration;
  if (context == InterfaceDeclarationContext.COMPILATION_UNIT) {
    interfaceDeclaration=new PackageMemberInterfaceDeclaration(location,optionalDocComment,modifiers,interfaceName,optionalTypeParameters,extendedTypes);
  }
 else   if (context == InterfaceDeclarationContext.NAMED_TYPE_DECLARATION) {
    interfaceDeclaration=new MemberInterfaceDeclaration(location,optionalDocComment,modifiers,interfaceName,optionalTypeParameters,extendedTypes);
  }
 else {
    throw new JaninoRuntimeException("SNO: Interface declaration in unexpected context " + context);
  }
  this.parseInterfaceBody(interfaceDeclaration);
  return interfaceDeclaration;
}
