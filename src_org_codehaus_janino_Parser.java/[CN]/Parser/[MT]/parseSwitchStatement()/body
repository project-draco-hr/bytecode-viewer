{
  final Location location=this.location();
  this.read("switch");
  this.read("(");
  final Rvalue condition=this.parseExpression().toRvalueOrCompileException();
  this.read(")");
  this.read("{");
  List<SwitchStatement.SwitchBlockStatementGroup> sbsgs=new ArrayList();
  while (!this.peekRead("}")) {
    Location location2=this.location();
    boolean hasDefaultLabel=false;
    List<Rvalue> caseLabels=new ArrayList();
    do {
      if (this.peekRead("case")) {
        caseLabels.add(this.parseExpression().toRvalueOrCompileException());
      }
 else       if (this.peekRead("default")) {
        if (hasDefaultLabel)         throw this.compileException("Duplicate \"default\" label");
        hasDefaultLabel=true;
      }
 else {
        throw this.compileException("\"case\" or \"default\" expected");
      }
      this.read(":");
    }
 while (this.peek(new String[]{"case","default"}) != -1);
    SwitchStatement.SwitchBlockStatementGroup sbsg=new SwitchStatement.SwitchBlockStatementGroup(location2,caseLabels,hasDefaultLabel,this.parseBlockStatements());
    sbsgs.add(sbsg);
  }
  return new SwitchStatement(location,condition,sbsgs);
}
