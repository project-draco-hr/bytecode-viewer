{
  if ((this.peekIdentifier() != null && this.peekNextButOne(":")) || this.peek(new String[]{"if","for","while","do","try","switch","synchronized","return","throw","break","continue","assert"}) != -1 || this.peek(new String[]{"{",";"}) != -1)   return this.parseStatement();
  if (this.peekRead("class")) {
    String optionalDocComment=this.scanner.doc();
    if (optionalDocComment == null)     this.warning("LCDCM","Local class doc comment missing",this.location());
    final LocalClassDeclaration lcd=(LocalClassDeclaration)this.parseClassDeclarationRest(optionalDocComment,new Modifiers(),ClassDeclarationContext.BLOCK);
    return new LocalClassDeclarationStatement(lcd);
  }
  if (this.peek(new String[]{"final","@"}) != -1) {
    LocalVariableDeclarationStatement lvds=new LocalVariableDeclarationStatement(this.location(),this.parseModifiers(),this.parseType(),this.parseVariableDeclarators());
    this.read(";");
    return lvds;
  }
  Atom a=this.parseExpression();
  if (this.peekRead(";")) {
    return new ExpressionStatement(a.toRvalueOrCompileException());
  }
  Type variableType=a.toTypeOrCompileException();
  LocalVariableDeclarationStatement lvds=new LocalVariableDeclarationStatement(a.getLocation(),new Java.Modifiers(Mod.NONE),variableType,this.parseVariableDeclarators());
  this.read(";");
  return lvds;
}
