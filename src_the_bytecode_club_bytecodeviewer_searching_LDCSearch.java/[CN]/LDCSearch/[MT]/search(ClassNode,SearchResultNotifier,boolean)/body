{
  final Iterator<MethodNode> methods=node.methods.iterator();
  final String srchText=searchText.getText();
  if (srchText.isEmpty())   return;
  while (methods.hasNext()) {
    final MethodNode method=methods.next();
    final InsnList insnlist=method.instructions;
    final ListIterator<AbstractInsnNode> instructions=insnlist.iterator();
    while (instructions.hasNext()) {
      final AbstractInsnNode insnNode=instructions.next();
      if (insnNode instanceof LdcInsnNode) {
        final LdcInsnNode ldcObject=((LdcInsnNode)insnNode);
        final String ldcString=ldcObject.cst.toString();
        String desc2=method.desc;
        try {
          desc2=Type.getType(method.desc).toString();
        }
 catch (        java.lang.ArrayIndexOutOfBoundsException e) {
        }
        if ((exact && ldcString.equals(srchText)) || (!exact && ldcString.contains(srchText))) {
          srn.notifyOfResult(node.name + "." + method.name+ desc2+ " -> \""+ ldcString+ "\" > "+ ldcObject.cst.getClass().getCanonicalName());
        }
      }
    }
  }
  final Iterator<FieldNode> fields=node.fields.iterator();
  while (methods.hasNext()) {
    final FieldNode field=fields.next();
    if (field.value instanceof String) {
      srn.notifyOfResult(node.name + "." + field.name+ field.desc+ " -> \""+ field.value+ "\" > field");
    }
  }
}
