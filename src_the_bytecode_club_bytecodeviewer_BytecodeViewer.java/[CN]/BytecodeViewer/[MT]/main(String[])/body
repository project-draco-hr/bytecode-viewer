{
  getBCVDirectory();
  SecurityManager sm=new SecurityManager(){
    @Override public void checkExec(    String cmd){
      throw new SecurityException("BCV is awesome.");
    }
    @Override public void checkListen(    int port){
      throw new SecurityException("BCV is awesome.");
    }
    @Override public void checkPermission(    Permission perm){
    }
    @Override public void checkPermission(    Permission perm,    Object context){
    }
    @Override public void checkAccess(    Thread t){
    }
    @Override public void checkAccept(    String host,    int port){
    }
    @Override public void checkAccess(    ThreadGroup g){
    }
    @Override public void checkAwtEventQueueAccess(){
    }
    @Override public void checkConnect(    String host,    int port){
    }
    @Override public void checkConnect(    String host,    int port,    Object context){
    }
    @Override public void checkCreateClassLoader(){
    }
    @Override public void checkDelete(    String file){
    }
    @Override public void checkExit(    int status){
    }
    @Override public void checkLink(    String lib){
    }
    @Override public void checkMemberAccess(    Class<?> clazz,    int which){
    }
    @Override public void checkMulticast(    InetAddress maddr){
    }
    @Override public void checkMulticast(    InetAddress maddr,    byte ttl){
    }
    @Override public void checkPackageAccess(    String pkg){
    }
    @Override public void checkPackageDefinition(    String pkg){
    }
    @Override public void checkPrintJobAccess(){
    }
    @Override public void checkPropertiesAccess(){
    }
    @Override public void checkPropertyAccess(    String key){
    }
    @Override public void checkRead(    FileDescriptor fd){
    }
    @Override public void checkRead(    String file){
    }
    @Override public void checkRead(    String file,    Object context){
    }
    @Override public void checkSecurityAccess(    String target){
    }
    @Override public void checkSetFactory(){
    }
    @Override public void checkSystemClipboardAccess(){
    }
    @Override public void checkWrite(    FileDescriptor fd){
    }
    @Override public void checkWrite(    String file){
    }
  }
;
  System.setSecurityManager(sm);
  System.out.println("https://the.bytecode.club - Created by @Konloch - Bytecode Viewer " + version);
  iconList=new ArrayList<BufferedImage>();
  int size=16;
  for (int i=0; i < 24; i++) {
    iconList.add(resize(icon,size,size));
    size+=2;
  }
  cleanup();
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      Settings.saveGUI();
      cleanup();
    }
  }
);
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
  }
  viewer=new MainViewerGUI();
  Settings.loadGUI();
  resetRecentFilesMenu();
  if (viewer.chckbxmntmNewCheckItem_12.isSelected())   versionChecker.start();
  viewer.setVisible(true);
  System.out.println("Start up took " + ((System.currentTimeMillis() - start) / 1000) + " seconds");
  if (args.length >= 1)   for (  String s : args) {
    openFiles(new File[]{new File(s)},true);
  }
}
