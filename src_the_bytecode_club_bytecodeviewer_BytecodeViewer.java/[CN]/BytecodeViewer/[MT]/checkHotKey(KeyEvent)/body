{
  if (System.currentTimeMillis() - last <= (4000))   return;
  if ((e.getKeyCode() == KeyEvent.VK_O) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    last=System.currentTimeMillis();
    JFileChooser fc=new JFileChooser();
    try {
      fc.setSelectedFile(new File(BytecodeViewer.lastDirectory));
    }
 catch (    Exception e2) {
    }
    fc.setFileFilter(viewer.new APKDEXJarZipClassFileFilter());
    fc.setFileHidingEnabled(false);
    fc.setAcceptAllFileFilterUsed(false);
    int returnVal=fc.showOpenDialog(BytecodeViewer.viewer);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      BytecodeViewer.lastDirectory=fc.getSelectedFile().getAbsolutePath();
      try {
        BytecodeViewer.viewer.setIcon(true);
        BytecodeViewer.openFiles(new File[]{fc.getSelectedFile()},true);
        BytecodeViewer.viewer.setIcon(false);
      }
 catch (      Exception e1) {
        new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e1);
      }
    }
  }
 else   if ((e.getKeyCode() == KeyEvent.VK_N) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    last=System.currentTimeMillis();
    BytecodeViewer.resetWorkSpace(true);
  }
 else   if ((e.getKeyCode() == KeyEvent.VK_T) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    last=System.currentTimeMillis();
    BytecodeViewer.compile(true);
  }
 else   if ((e.getKeyCode() == KeyEvent.VK_R) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    last=System.currentTimeMillis();
    if (BytecodeViewer.getLoadedClasses().isEmpty()) {
      BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
      return;
    }
    new RunOptions().setVisible(true);
  }
 else   if ((e.getKeyCode() == KeyEvent.VK_S) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    last=System.currentTimeMillis();
    if (BytecodeViewer.getLoadedClasses().isEmpty()) {
      BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
      return;
    }
    if (viewer.autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))     return;
    JFileChooser fc=new JFileChooser();
    fc.setFileFilter(viewer.new ZipFileFilter());
    fc.setFileHidingEnabled(false);
    fc.setAcceptAllFileFilterUsed(false);
    int returnVal=fc.showSaveDialog(viewer);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File file=fc.getSelectedFile();
      if (!file.getAbsolutePath().endsWith(".zip"))       file=new File(file.getAbsolutePath() + ".zip");
      if (file.exists()) {
        JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
        Object[] options=new String[]{"Yes","No"};
        pane.setOptions(options);
        JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
        dialog.setVisible(true);
        Object obj=pane.getValue();
        int result=-1;
        for (int k=0; k < options.length; k++)         if (options[k].equals(obj))         result=k;
        if (result == 0) {
          file.delete();
        }
 else {
          return;
        }
      }
      final File file2=file;
      BytecodeViewer.viewer.setIcon(true);
      Thread t=new Thread(){
        @Override public void run(){
          JarUtils.saveAsJar(BytecodeViewer.getLoadedClasses(),file2.getAbsolutePath());
          BytecodeViewer.viewer.setIcon(false);
        }
      }
;
      t.start();
    }
  }
 else   if ((e.getKeyCode() == KeyEvent.VK_W) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    last=System.currentTimeMillis();
    if (viewer.workPane.getCurrentViewer() != null)     viewer.workPane.tabs.remove(viewer.workPane.getCurrentViewer());
  }
}
