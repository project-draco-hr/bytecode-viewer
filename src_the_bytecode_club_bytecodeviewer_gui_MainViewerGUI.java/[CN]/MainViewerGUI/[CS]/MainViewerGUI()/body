{
  KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new Test());
  mnNewMenu_5.setVisible(false);
  this.addWindowStateListener(new WindowAdapter(){
    public void windowStateChanged(    WindowEvent evt){
      int oldState=evt.getOldState();
      int newState=evt.getNewState();
      if ((oldState & Frame.ICONIFIED) == 0 && (newState & Frame.ICONIFIED) != 0) {
      }
 else       if ((oldState & Frame.ICONIFIED) != 0 && (newState & Frame.ICONIFIED) == 0) {
      }
      if ((oldState & Frame.MAXIMIZED_BOTH) == 0 && (newState & Frame.MAXIMIZED_BOTH) != 0) {
        isMaximized=true;
      }
 else       if ((oldState & Frame.MAXIMIZED_BOTH) != 0 && (newState & Frame.MAXIMIZED_BOTH) == 0) {
        isMaximized=false;
      }
    }
  }
);
  this.setIconImages(Resources.iconList);
  panelGroup1.add(panel1None);
  panelGroup1.add(panel1Fern);
  panelGroup1.add(panel1Proc);
  panelGroup1.add(panel1CFR);
  panelGroup1.add(panel1Smali);
  panelGroup1.add(panel1Hexcode);
  panelGroup1.add(panel1Krakatau);
  panelGroup1.add(panel1KrakatauEditable);
  panelGroup1.setSelected(panel1Proc.getModel(),true);
  panelGroup2.add(panel2None);
  panelGroup2.add(panel2Fern);
  panelGroup2.add(panel2Proc);
  panelGroup2.add(panel2CFR);
  panelGroup2.add(panel2Smali);
  panelGroup2.add(panel2Hexcode);
  panelGroup2.add(panel2Krakatau);
  panelGroup2.add(panel2KrakatauEditable);
  panelGroup3.add(panel3None);
  panelGroup3.add(panel3Fern);
  panelGroup3.add(panel3Proc);
  panelGroup3.add(panel3CFR);
  panelGroup3.add(panel3Smali);
  panelGroup3.add(panel3Hexcode);
  panelGroup3.add(panel3Krakatau);
  panelGroup3.add(panel3KrakatauEditable);
  panelGroup3.setSelected(panel3None.getModel(),true);
  ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (refreshOnChange.isSelected()) {
        if (workPane.getCurrentClass() == null)         return;
        workPane.refreshClass.doClick();
      }
    }
  }
;
  panel1None.addActionListener(listener);
  panel1Fern.addActionListener(listener);
  panel1Proc.addActionListener(listener);
  panel1CFR.addActionListener(listener);
  panel1Smali.addActionListener(listener);
  panel1Hexcode.addActionListener(listener);
  panel1Krakatau.addActionListener(listener);
  panel1KrakatauEditable.addActionListener(listener);
  panel2None.addActionListener(listener);
  panel2Fern.addActionListener(listener);
  panel2Proc.addActionListener(listener);
  panel2CFR.addActionListener(listener);
  panel2Smali.addActionListener(listener);
  panel2Hexcode.addActionListener(listener);
  panel2Krakatau.addActionListener(listener);
  panel2KrakatauEditable.addActionListener(listener);
  panel3None.addActionListener(listener);
  panel3Fern.addActionListener(listener);
  panel3Proc.addActionListener(listener);
  panel3CFR.addActionListener(listener);
  panel3Smali.addActionListener(listener);
  panel3Hexcode.addActionListener(listener);
  panel3Krakatau.addActionListener(listener);
  panel3KrakatauEditable.addActionListener(listener);
  obfuscatorGroup.add(strongObf);
  obfuscatorGroup.add(lightObf);
  obfuscatorGroup.setSelected(strongObf.getModel(),true);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  setJMenuBar(menuBar);
  JMenu mnNewMenu=new JMenu("File");
  menuBar.add(mnNewMenu);
  mntmNewWorkspace.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      BytecodeViewer.resetWorkSpace(true);
    }
  }
);
  JMenuItem mntmLoadJar=new JMenuItem("Add..");
  mntmLoadJar.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fc=new JFileChooser();
      try {
        File f=new File(BytecodeViewer.lastDirectory);
        if (f.exists())         fc.setSelectedFile(f);
      }
 catch (      Exception e2) {
      }
      fc.setFileFilter(new APKDEXJarZipClassFileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showOpenDialog(BytecodeViewer.viewer);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        BytecodeViewer.lastDirectory=fc.getSelectedFile().getAbsolutePath();
        try {
          BytecodeViewer.viewer.setIcon(true);
          BytecodeViewer.openFiles(new File[]{fc.getSelectedFile()},true);
          BytecodeViewer.viewer.setIcon(false);
        }
 catch (        Exception e1) {
          new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e1);
        }
      }
    }
  }
);
  mnNewMenu.add(mntmLoadJar);
  mnNewMenu.add(mntmNewWorkspace);
  JMenuItem mntmSave=new JMenuItem("Save Files As..");
  mntmSave.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))       return;
      JFileChooser fc=new JFileChooser();
      fc.setFileFilter(new ZipFileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showSaveDialog(MainViewerGUI.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file=fc.getSelectedFile();
        if (!file.getAbsolutePath().endsWith(".zip"))         file=new File(file.getAbsolutePath() + ".zip");
        if (file.exists()) {
          JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
          Object[] options=new String[]{"Yes","No"};
          pane.setOptions(options);
          JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
          dialog.setVisible(true);
          Object obj=pane.getValue();
          int result=-1;
          for (int k=0; k < options.length; k++)           if (options[k].equals(obj))           result=k;
          if (result == 0) {
            file.delete();
          }
 else {
            return;
          }
        }
        final File file2=file;
        BytecodeViewer.viewer.setIcon(true);
        Thread t=new Thread(){
          @Override public void run(){
            JarUtils.saveAsJar(BytecodeViewer.getLoadedClasses(),file2.getAbsolutePath());
            BytecodeViewer.viewer.setIcon(false);
          }
        }
;
        t.start();
      }
    }
  }
);
  mnNewMenu.add(separator_3);
  mntmNewMenuItem_3.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))       return;
      JFileChooser fc=new JFileChooser();
      fc.setFileFilter(new JarFileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showSaveDialog(MainViewerGUI.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file=fc.getSelectedFile();
        String path=file.getAbsolutePath();
        if (!path.endsWith(".jar"))         path=path + ".jar";
        if (new File(path).exists()) {
          JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
          Object[] options=new String[]{"Yes","No"};
          pane.setOptions(options);
          JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
          dialog.setVisible(true);
          Object obj=pane.getValue();
          int result=-1;
          for (int k=0; k < options.length; k++)           if (options[k].equals(obj))           result=k;
          if (result == 0) {
            file.delete();
          }
 else {
            return;
          }
        }
        new ExportJar(path).setVisible(true);
      }
    }
  }
);
  mntmNewMenuItem_13.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      BytecodeViewer.compile(true);
    }
  }
);
  mntmRun.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      new RunOptions().setVisible(true);
    }
  }
);
  mnNewMenu.add(mntmRun);
  mnNewMenu.add(mntmNewMenuItem_13);
  mnNewMenu.add(separator_18);
  mnNewMenu.add(mntmNewMenuItem_3);
  mntmSaveAsApk.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))       return;
      JFileChooser fc=new JFileChooser();
      fc.setFileFilter(new DexFileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showSaveDialog(MainViewerGUI.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        final File file=fc.getSelectedFile();
        String output=file.getAbsolutePath();
        if (!output.endsWith(".dex"))         output=output + ".dex";
        final File file2=new File(output);
        if (file2.exists()) {
          JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
          Object[] options=new String[]{"Yes","No"};
          pane.setOptions(options);
          JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
          dialog.setVisible(true);
          Object obj=pane.getValue();
          int result=-1;
          for (int k=0; k < options.length; k++)           if (options[k].equals(obj))           result=k;
          if (result == 0) {
            file.delete();
          }
 else {
            return;
          }
        }
        Thread t=new Thread(){
          @Override public void run(){
            BytecodeViewer.viewer.setIcon(true);
            final String input=BytecodeViewer.tempDirectory + BytecodeViewer.fs + BytecodeViewer.getRandomizedName()+ ".jar";
            JarUtils.saveAsJar(BytecodeViewer.getLoadedClasses(),input);
            Thread t=new Thread(){
              @Override public void run(){
                Dex2Jar.saveAsDex(new File(input),file2);
                BytecodeViewer.viewer.setIcon(false);
              }
            }
;
            t.start();
          }
        }
;
        t.start();
      }
    }
  }
);
  mnNewMenu.add(mntmSaveAsApk);
  mnNewMenu.add(mntmSave);
  mntmNewMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))       return;
      JFileChooser fc=new JFileChooser();
      fc.setFileFilter(new ZipFileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showSaveDialog(MainViewerGUI.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file=fc.getSelectedFile();
        if (!file.getAbsolutePath().endsWith(".zip"))         file=new File(file.getAbsolutePath() + ".zip");
        if (file.exists()) {
          JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
          Object[] options=new String[]{"Yes","No"};
          pane.setOptions(options);
          JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
          dialog.setVisible(true);
          Object obj=pane.getValue();
          int result=-1;
          for (int k=0; k < options.length; k++)           if (options[k].equals(obj))           result=k;
          if (result == 0) {
            file.delete();
          }
 else {
            return;
          }
        }
        BytecodeViewer.viewer.setIcon(true);
        final String path=appendZip(file);
        JOptionPane pane=new JOptionPane("What decompiler will you use?");
        Object[] options=new String[]{"Procyon","CFR","Fernflower","Krakatau","Cancel"};
        pane.setOptions(options);
        JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Select Decompiler");
        dialog.setVisible(true);
        Object obj=pane.getValue();
        int result=-1;
        for (int k=0; k < options.length; k++)         if (options[k].equals(obj))         result=k;
        if (result == 0) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                proc_dc.decompileToZip(path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 1) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                cfr_dc.decompileToZip(path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 2) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                ff_dc.decompileToZip(path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 3) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                krak_dc.decompileToZip(path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 4) {
          BytecodeViewer.viewer.setIcon(false);
        }
      }
    }
  }
);
  mntmNewMenuItem_12.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (workPane.getCurrentClass() == null) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      if (autoCompileSmali.isSelected() && !BytecodeViewer.compile(false))       return;
      final String s=workPane.getCurrentClass().name;
      JFileChooser fc=new JFileChooser();
      fc.setFileFilter(new JavaFileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showSaveDialog(MainViewerGUI.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file=fc.getSelectedFile();
        BytecodeViewer.viewer.setIcon(true);
        final String path=appendJava(file);
        if (new File(path).exists()) {
          JOptionPane pane=new JOptionPane("Are you sure you wish to overwrite this existing file?");
          Object[] options=new String[]{"Yes","No"};
          pane.setOptions(options);
          JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Overwrite File");
          dialog.setVisible(true);
          Object obj=pane.getValue();
          int result=-1;
          for (int k=0; k < options.length; k++)           if (options[k].equals(obj))           result=k;
          if (result == 0) {
            file.delete();
          }
 else {
            return;
          }
        }
        JOptionPane pane=new JOptionPane("What decompiler will you use?");
        Object[] options=new String[]{"Procyon","CFR","Fernflower","Krakatau","Cancel"};
        pane.setOptions(options);
        JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Select Decompiler");
        dialog.setVisible(true);
        Object obj=pane.getValue();
        int result=-1;
        for (int k=0; k < options.length; k++)         if (options[k].equals(obj))         result=k;
        if (result == 0) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                proc_dc.decompileToClass(s,path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 1) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                cfr_dc.decompileToClass(s,path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 2) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                ff_dc.decompileToClass(s,path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 3) {
          Thread t=new Thread(){
            @Override public void run(){
              try {
                krak_dc.decompileToClass(s,path);
                BytecodeViewer.viewer.setIcon(false);
              }
 catch (              Exception e) {
                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
              }
            }
          }
;
          t.start();
        }
        if (result == 4) {
          BytecodeViewer.viewer.setIcon(false);
        }
      }
    }
  }
);
  mnNewMenu.add(mntmNewMenuItem_12);
  mnNewMenu.add(mntmNewMenuItem);
  JSeparator separator=new JSeparator();
  mnNewMenu.add(separator);
  mnNewMenu.add(mnRecentFiles);
  JSeparator separator_1=new JSeparator();
  mnNewMenu.add(separator_1);
  mntmAbout.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      aboutWindow.setVisible(true);
    }
  }
);
  mnNewMenu.add(mntmAbout);
  JMenuItem mntmExit=new JMenuItem("Exit");
  mntmExit.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      JOptionPane pane=new JOptionPane("Are you sure you want to exit?");
      Object[] options=new String[]{"Yes","No"};
      pane.setOptions(options);
      JDialog dialog=pane.createDialog(BytecodeViewer.viewer,"Bytecode Viewer - Exit");
      dialog.setVisible(true);
      Object obj=pane.getValue();
      int result=-1;
      for (int k=0; k < options.length; k++)       if (options[k].equals(obj))       result=k;
      if (result == 0) {
        System.exit(0);
      }
    }
  }
);
  mnNewMenu.add(mntmExit);
  menuBar.add(mnNewMenu_6);
  mnNewMenu_6.add(pane1Editable);
  pane2Editable.setVerticalTextPosition(SwingConstants.TOP);
  mnNewMenu_6.add(pane2Editable);
  mnNewMenu_6.add(pane3Editable);
  mnNewMenu_6.add(separator_14);
  mnNewMenu_6.add(mnNewMenu_7);
  mnNewMenu_7.add(panel1None);
  mnNewMenu_7.add(separator_7);
  mnNewMenu_7.add(panel1Proc);
  mnNewMenu_7.add(panel1CFR);
  mnNewMenu_7.add(panel1Fern);
  mnNewMenu_7.add(panel1Krakatau);
  mnNewMenu_7.add(separator_8);
  mnNewMenu_7.add(panel1KrakatauEditable);
  mnNewMenu_7.add(panel1Smali);
  panelGroup1.add(panel1Bytecode);
  panel1Bytecode.addActionListener(listener);
  mnNewMenu_7.add(separator_15);
  mnNewMenu_7.add(panel1Bytecode);
  mnNewMenu_7.add(panel1Hexcode);
  mnNewMenu_6.add(mnNewMenu_8);
  mnNewMenu_8.add(panel2None);
  mnNewMenu_8.add(separator_9);
  mnNewMenu_8.add(panel2Proc);
  mnNewMenu_8.add(panel2CFR);
  mnNewMenu_8.add(panel2Fern);
  mnNewMenu_8.add(panel2Krakatau);
  mnNewMenu_8.add(separator_10);
  mnNewMenu_8.add(panel2KrakatauEditable);
  mnNewMenu_8.add(panel2Smali);
  panelGroup2.add(panel2Bytecode);
  panelGroup2.setSelected(panel2Bytecode.getModel(),true);
  panel2Bytecode.addActionListener(listener);
  mnNewMenu_8.add(separator_16);
  mnNewMenu_8.add(panel2Bytecode);
  mnNewMenu_8.add(panel2Hexcode);
  mnNewMenu_6.add(mnNewMenu_9);
  mnNewMenu_9.add(panel3None);
  mnNewMenu_9.add(separator_11);
  mnNewMenu_9.add(panel3Proc);
  mnNewMenu_9.add(panel3CFR);
  mnNewMenu_9.add(panel3Fern);
  mnNewMenu_9.add(panel3Krakatau);
  mnNewMenu_9.add(separator_12);
  mnNewMenu_9.add(panel3KrakatauEditable);
  mnNewMenu_9.add(panel3Smali);
  panelGroup3.add(panel3Bytecode);
  panel3Bytecode.addActionListener(listener);
  mnNewMenu_9.add(separator_17);
  mnNewMenu_9.add(panel3Bytecode);
  mnNewMenu_9.add(panel3Hexcode);
  menuBar.add(mnSettings);
  mnSettings.add(autoCompileSmali);
  mnSettings.add(autoCompileOnRefresh);
  mnSettings.add(chckbxmntmNewCheckItem_12);
  chckbxmntmNewCheckItem_12.setSelected(true);
  mnSettings.add(refreshOnChange);
  mnSettings.add(decodeAPKResources);
  mnSettings.add(separator_13);
  mntmSetPythonDirectory.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      pythonC();
    }
  }
);
  mnSettings.add(mntmSetPythonDirectory);
  mntmSetJreRt.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      rtC();
    }
  }
);
  mnSettings.add(mntmSetJreRt);
  mnSettings.add(separator_6);
  mnSettings.add(mnNewMenu_4);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_6);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_11);
  mnNewMenu_4.add(chckbxmntmShowDebugLine);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_3);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_4);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_7);
  mnNewMenu_4.add(chckbxmntmSimplifyMemberReferences);
  mnNewMenu_4.add(mnMergeVariables);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_8);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_9);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_10);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_2);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_5);
  mnNewMenu_4.add(chckbxmntmNewCheckItem_1);
  decodeenumswitch.setSelected(true);
  sugarenums.setSelected(true);
  decodestringswitch.setSelected(true);
  arrayiter.setSelected(true);
  collectioniter.setSelected(true);
  innerclasses.setSelected(true);
  removeboilerplate.setSelected(true);
  removeinnerclasssynthetics.setSelected(true);
  decodelambdas.setSelected(true);
  hidebridgemethods.setSelected(true);
  liftconstructorinit.setSelected(true);
  removedeadmethods.setSelected(true);
  removebadgenerics.setSelected(true);
  sugarasserts.setSelected(true);
  sugarboxing.setSelected(true);
  showversion.setSelected(true);
  decodefinally.setSelected(true);
  tidymonitors.setSelected(true);
  lenient.setSelected(false);
  dumpclasspath.setSelected(false);
  comments.setSelected(true);
  forcetopsort.setSelected(true);
  forcetopsortaggress.setSelected(true);
  forceexceptionprune.setSelected(true);
  stringbuffer.setSelected(false);
  stringbuilder.setSelected(true);
  silent.setSelected(true);
  recover.setSelected(true);
  eclipse.setSelected(true);
  override.setSelected(true);
  showinferrable.setSelected(true);
  aexagg.setSelected(true);
  forcecondpropagate.setSelected(true);
  hideutf.setSelected(true);
  hidelongstrings.setSelected(false);
  commentmonitor.setSelected(false);
  allowcorrecting.setSelected(true);
  labelledblocks.setSelected(true);
  j14classobj.setSelected(false);
  hidelangimports.setSelected(true);
  recoverytypeclash.setSelected(true);
  recoverytypehints.setSelected(true);
  forceturningifs.setSelected(true);
  forloopaggcapture.setSelected(true);
  mnSettings.add(mnNewMenu_3);
  mnNewMenu_3.add(decodeenumswitch);
  mnNewMenu_3.add(sugarenums);
  mnNewMenu_3.add(decodestringswitch);
  mnNewMenu_3.add(arrayiter);
  mnNewMenu_3.add(collectioniter);
  mnNewMenu_3.add(innerclasses);
  mnNewMenu_3.add(removeboilerplate);
  mnNewMenu_3.add(removeinnerclasssynthetics);
  mnNewMenu_3.add(decodelambdas);
  mnNewMenu_3.add(hidebridgemethods);
  mnNewMenu_3.add(liftconstructorinit);
  mnNewMenu_3.add(removedeadmethods);
  mnNewMenu_3.add(removebadgenerics);
  mnNewMenu_3.add(sugarasserts);
  mnNewMenu_3.add(sugarboxing);
  mnNewMenu_3.add(showversion);
  mnNewMenu_3.add(decodefinally);
  mnNewMenu_3.add(tidymonitors);
  mnNewMenu_3.add(lenient);
  mnNewMenu_3.add(dumpclasspath);
  mnNewMenu_3.add(comments);
  mnNewMenu_3.add(forcetopsort);
  mnNewMenu_3.add(forcetopsortaggress);
  mnNewMenu_3.add(forceexceptionprune);
  mnNewMenu_3.add(stringbuffer);
  mnNewMenu_3.add(stringbuilder);
  mnNewMenu_3.add(silent);
  mnNewMenu_3.add(recover);
  mnNewMenu_3.add(eclipse);
  mnNewMenu_3.add(override);
  mnNewMenu_3.add(showinferrable);
  mnNewMenu_3.add(aexagg);
  mnNewMenu_3.add(forcecondpropagate);
  mnNewMenu_3.add(hideutf);
  mnNewMenu_3.add(hidelongstrings);
  mnNewMenu_3.add(commentmonitor);
  mnNewMenu_3.add(allowcorrecting);
  mnNewMenu_3.add(labelledblocks);
  mnNewMenu_3.add(j14classobj);
  mnNewMenu_3.add(hidelangimports);
  mnNewMenu_3.add(recoverytypeclash);
  mnNewMenu_3.add(recoverytypehints);
  mnNewMenu_3.add(forceturningifs);
  mnNewMenu_3.add(forloopaggcapture);
  rbr.setSelected(true);
  rsy.setSelected(false);
  din.setSelected(true);
  das.setSelected(true);
  dgs.setSelected(false);
  den.setSelected(true);
  uto.setSelected(true);
  udv.setSelected(true);
  fdi.setSelected(true);
  asc.setSelected(false);
  JMenu mnDecompilerSettings=new JMenu("FernFlower");
  mnSettings.add(mnDecompilerSettings);
  dc4.setSelected(true);
  mnDecompilerSettings.add(dc4);
  nns.setSelected(true);
  mnDecompilerSettings.add(nns);
  ner.setSelected(true);
  mnDecompilerSettings.add(ner);
  bto.setSelected(true);
  mnDecompilerSettings.add(bto);
  rgn.setSelected(true);
  mnDecompilerSettings.add(rgn);
  rer.setSelected(true);
  mnDecompilerSettings.add(rer);
  mnDecompilerSettings.add(rbr);
  mnDecompilerSettings.add(rsy);
  hes.setSelected(true);
  mnDecompilerSettings.add(hes);
  hdc.setSelected(true);
  mnDecompilerSettings.add(hdc);
  mnDecompilerSettings.add(din);
  mnDecompilerSettings.add(das);
  mnDecompilerSettings.add(dgs);
  mnDecompilerSettings.add(den);
  mnDecompilerSettings.add(uto);
  mnDecompilerSettings.add(udv);
  mnDecompilerSettings.add(fdi);
  mnDecompilerSettings.add(asc);
  debugHelpers.setSelected(true);
  chckbxmntmAppendBrackets.setSelected(true);
  JMenu mnBytecodeDecompilerSettings=new JMenu("Bytecode Decompiler");
  mnSettings.add(mnBytecodeDecompilerSettings);
  mnBytecodeDecompilerSettings.add(debugHelpers);
  mnBytecodeDecompilerSettings.add(chckbxmntmAppendBrackets);
  menuBar.add(mnNewMenu_5);
  mntmNewMenuItem_6.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.runningObfuscation) {
        BytecodeViewer.showMessage("You're currently running an obfuscation task, wait for this to finish.");
        return;
      }
      new RenameFields().start();
    }
  }
);
  mnNewMenu_5.add(strongObf);
  mnNewMenu_5.add(lightObf);
  mnNewMenu_5.add(separator_2);
  mntmNewMenuItem_8.setEnabled(false);
  mnNewMenu_5.add(mntmNewMenuItem_8);
  mnNewMenu_5.add(mntmNewMenuItem_6);
  mntmNewMenuItem_7.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.runningObfuscation) {
        BytecodeViewer.showMessage("You're currently running an obfuscation task, wait for this to finish.");
        return;
      }
      new RenameMethods().start();
    }
  }
);
  mnNewMenu_5.add(mntmNewMenuItem_7);
  mntmNewMenuItem_11.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.runningObfuscation) {
        BytecodeViewer.showMessage("You're currently running an obfuscation task, wait for this to finish.");
        return;
      }
      new RenameClasses().start();
    }
  }
);
  mnNewMenu_5.add(mntmNewMenuItem_11);
  mntmNewMenuItem_9.setEnabled(false);
  mnNewMenu_5.add(mntmNewMenuItem_9);
  mntmNewMenuItem_10.setEnabled(false);
  mnNewMenu_5.add(mntmNewMenuItem_10);
  menuBar.add(mnNewMenu_1);
  mnNewMenu_1.add(mntmStartExternalPlugin);
  mnNewMenu_1.add(separator_4);
  mnNewMenu_1.add(mnRecentPlugins);
  mnNewMenu_1.add(separator_5);
  mntmCodeSequenceDiagram.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      PluginManager.runPlugin(new CodeSequenceDiagram());
    }
  }
);
  mnNewMenu_1.add(mntmCodeSequenceDiagram);
  mnNewMenu_1.add(mntmNewMenuItem_1);
  mnNewMenu_1.add(mntmShowMainMethods);
  mnNewMenu_1.add(mntmShowAllStrings);
  mntmReplaceStrings.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      new ReplaceStringsOptions().setVisible(true);
    }
  }
);
  mnNewMenu_1.add(mntmReplaceStrings);
  mnNewMenu_1.add(mntmNewMenuItem_2);
  mnNewMenu_1.add(mntmStartZkmString);
  mntmZstringarrayDecrypter.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      PluginManager.runPlugin(new ZStringArrayDecrypter());
    }
  }
);
  mnNewMenu_1.add(mntmZstringarrayDecrypter);
  menuBar.add(mntmNewMenuItem_4);
  mntmStartExternalPlugin.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      JFileChooser fc=new JFileChooser();
      fc.setFileFilter(new JavaPFileFilter());
      fc.setFileHidingEnabled(false);
      fc.setAcceptAllFileFilterUsed(false);
      int returnVal=fc.showOpenDialog(BytecodeViewer.viewer);
      if (returnVal == JFileChooser.APPROVE_OPTION)       try {
        BytecodeViewer.viewer.setIcon(true);
        BytecodeViewer.startPlugin(fc.getSelectedFile());
        BytecodeViewer.viewer.setIcon(false);
      }
 catch (      Exception e1) {
        new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e1);
      }
    }
  }
);
  mntmStartZkmString.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PluginManager.runPlugin(new ZKMStringDecrypter());
    }
  }
);
  mntmNewMenuItem_2.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PluginManager.runPlugin(new AllatoriStringDecrypter());
    }
  }
);
  mntmNewMenuItem_1.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (BytecodeViewer.getLoadedClasses().isEmpty()) {
        BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
        return;
      }
      new MaliciousCodeScannerOptions().setVisible(true);
    }
  }
);
  mntmShowAllStrings.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PluginManager.runPlugin(new ShowAllStrings());
    }
  }
);
  mntmShowMainMethods.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PluginManager.runPlugin(new ShowMainMethods());
    }
  }
);
  setSize(new Dimension(800,400));
  setTitle("Bytecode Viewer " + BytecodeViewer.version + " - https://bytecodeviewer.com | https://the.bytecode.club - @Konloch");
  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.X_AXIS));
  FileNavigationPane cn=new FileNavigationPane(this);
  cn.setMinimumSize(new Dimension(200,50));
  SearchingPane s=new SearchingPane(this);
  s.setPreferredSize(new Dimension(200,50));
  s.setMinimumSize(new Dimension(200,50));
  s.setMaximumSize(new Dimension(200,2147483647));
  sp1=new JSplitPane(JSplitPane.VERTICAL_SPLIT,cn,s);
  cn.setPreferredSize(new Dimension(200,50));
  cn.setMaximumSize(new Dimension(200,2147483647));
  sp2=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,sp1,workPane);
  getContentPane().add(sp2);
  sp2.setResizeWeight(0.05);
  sp1.setResizeWeight(0.5);
  rfComps.add(cn);
  rfComps.add(s);
  rfComps.add(workPane);
  this.setLocationRelativeTo(null);
}
