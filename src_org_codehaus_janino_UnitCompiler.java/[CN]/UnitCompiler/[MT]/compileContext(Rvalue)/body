{
  final int[] res=new int[1];
  RvalueVisitor rvv=new RvalueVisitor(){
    @Override public void visitArrayLength(    ArrayLength al){
      try {
        res[0]=UnitCompiler.this.compileContext2(al);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitAssignment(    Assignment a){
      res[0]=UnitCompiler.this.compileContext2(a);
    }
    @Override public void visitUnaryOperation(    UnaryOperation uo){
      res[0]=UnitCompiler.this.compileContext2(uo);
    }
    @Override public void visitBinaryOperation(    BinaryOperation bo){
      res[0]=UnitCompiler.this.compileContext2(bo);
    }
    @Override public void visitCast(    Cast c){
      res[0]=UnitCompiler.this.compileContext2(c);
    }
    @Override public void visitClassLiteral(    ClassLiteral cl){
      res[0]=UnitCompiler.this.compileContext2(cl);
    }
    @Override public void visitConditionalExpression(    ConditionalExpression ce){
      res[0]=UnitCompiler.this.compileContext2(ce);
    }
    @Override public void visitCrement(    Crement c){
      res[0]=UnitCompiler.this.compileContext2(c);
    }
    @Override public void visitInstanceof(    Instanceof io){
      res[0]=UnitCompiler.this.compileContext2(io);
    }
    @Override public void visitMethodInvocation(    MethodInvocation mi){
      res[0]=UnitCompiler.this.compileContext2(mi);
    }
    @Override public void visitSuperclassMethodInvocation(    SuperclassMethodInvocation smi){
      res[0]=UnitCompiler.this.compileContext2(smi);
    }
    @Override public void visitIntegerLiteral(    IntegerLiteral il){
      res[0]=UnitCompiler.this.compileContext2(il);
    }
    @Override public void visitFloatingPointLiteral(    FloatingPointLiteral fpl){
      res[0]=UnitCompiler.this.compileContext2(fpl);
    }
    @Override public void visitBooleanLiteral(    BooleanLiteral bl){
      res[0]=UnitCompiler.this.compileContext2(bl);
    }
    @Override public void visitCharacterLiteral(    CharacterLiteral cl){
      res[0]=UnitCompiler.this.compileContext2(cl);
    }
    @Override public void visitStringLiteral(    StringLiteral sl){
      res[0]=UnitCompiler.this.compileContext2(sl);
    }
    @Override public void visitNullLiteral(    NullLiteral nl){
      res[0]=UnitCompiler.this.compileContext2(nl);
    }
    @Override public void visitSimpleConstant(    SimpleConstant sl){
      res[0]=UnitCompiler.this.compileContext2(sl);
    }
    @Override public void visitNewAnonymousClassInstance(    NewAnonymousClassInstance naci){
      res[0]=UnitCompiler.this.compileContext2(naci);
    }
    @Override public void visitNewArray(    NewArray na){
      res[0]=UnitCompiler.this.compileContext2(na);
    }
    @Override public void visitNewInitializedArray(    NewInitializedArray nia){
      res[0]=UnitCompiler.this.compileContext2(nia);
    }
    @Override public void visitNewClassInstance(    NewClassInstance nci){
      res[0]=UnitCompiler.this.compileContext2(nci);
    }
    @Override public void visitParameterAccess(    ParameterAccess pa){
      res[0]=UnitCompiler.this.compileContext2(pa);
    }
    @Override public void visitQualifiedThisReference(    QualifiedThisReference qtr){
      res[0]=UnitCompiler.this.compileContext2(qtr);
    }
    @Override public void visitThisReference(    ThisReference tr){
      res[0]=UnitCompiler.this.compileContext2(tr);
    }
    @Override public void visitAmbiguousName(    AmbiguousName an){
      try {
        res[0]=UnitCompiler.this.compileContext2(an);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitArrayAccessExpression(    ArrayAccessExpression aae){
      try {
        res[0]=UnitCompiler.this.compileContext2(aae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitFieldAccess(    FieldAccess fa){
      try {
        res[0]=UnitCompiler.this.compileContext2(fa);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitFieldAccessExpression(    FieldAccessExpression fae){
      try {
        res[0]=UnitCompiler.this.compileContext2(fae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitSuperclassFieldAccessExpression(    SuperclassFieldAccessExpression scfae){
      try {
        res[0]=UnitCompiler.this.compileContext2(scfae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitLocalVariableAccess(    LocalVariableAccess lva){
      res[0]=UnitCompiler.this.compileContext2(lva);
    }
    @Override public void visitParenthesizedExpression(    ParenthesizedExpression pe){
      try {
        res[0]=UnitCompiler.this.compileContext2(pe);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
  }
;
  try {
    rv.accept(rvv);
    return res[0];
  }
 catch (  UncheckedCompileException uce) {
    throw uce.compileException;
  }
}
