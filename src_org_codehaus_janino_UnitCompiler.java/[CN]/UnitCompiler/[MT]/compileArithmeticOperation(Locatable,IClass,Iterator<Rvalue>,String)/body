{
  if (operator == "|" || operator == "^" || operator == "&") {
    final int iopcode=(operator == "&" ? Opcode.IAND : operator == "|" ? Opcode.IOR : operator == "^" ? Opcode.IXOR : Integer.MAX_VALUE);
    do {
      Rvalue operand=(Rvalue)operands.next();
      if (type == null) {
        type=this.compileGetValue(operand);
      }
 else {
        CodeContext.Inserter convertLhsInserter=this.codeContext.newInserter();
        IClass rhsType=this.compileGetValue(operand);
        if (type.isPrimitiveNumeric() && rhsType.isPrimitiveNumeric()) {
          IClass promotedType=this.binaryNumericPromotion(locatable,type,convertLhsInserter,rhsType);
          if (promotedType == IClass.INT) {
            this.writeOpcode(locatable,iopcode);
          }
 else           if (promotedType == IClass.LONG) {
            this.writeOpcode(locatable,iopcode + 1);
          }
 else {
            this.compileError(("Operator \"" + operator + "\" not defined on types \""+ type+ "\" and \""+ rhsType+ "\""),locatable.getLocation());
          }
          type=promotedType;
        }
 else         if ((type == IClass.BOOLEAN || this.getUnboxedType(type) == IClass.BOOLEAN) && (rhsType == IClass.BOOLEAN || this.getUnboxedType(rhsType) == IClass.BOOLEAN)) {
          IClassLoader icl=this.iClassLoader;
          if (type == icl.TYPE_java_lang_Boolean) {
            this.codeContext.pushInserter(convertLhsInserter);
            try {
              this.unboxingConversion(locatable,icl.TYPE_java_lang_Boolean,IClass.BOOLEAN);
            }
  finally {
              this.codeContext.popInserter();
            }
          }
          if (rhsType == icl.TYPE_java_lang_Boolean) {
            this.unboxingConversion(locatable,icl.TYPE_java_lang_Boolean,IClass.BOOLEAN);
          }
          this.writeOpcode(locatable,iopcode);
          type=IClass.BOOLEAN;
        }
 else {
          this.compileError(("Operator \"" + operator + "\" not defined on types \""+ type+ "\" and \""+ rhsType+ "\""),locatable.getLocation());
          type=IClass.INT;
        }
      }
    }
 while (operands.hasNext());
    return type;
  }
  if (operator == "*" || operator == "/" || operator == "%" || operator == "+" || operator == "-") {
    final int iopcode=(operator == "*" ? Opcode.IMUL : operator == "/" ? Opcode.IDIV : operator == "%" ? Opcode.IREM : operator == "+" ? Opcode.IADD : operator == "-" ? Opcode.ISUB : Integer.MAX_VALUE);
    do {
      Rvalue operand=(Rvalue)operands.next();
      IClass operandType=this.getType(operand);
      IClassLoader icl=this.iClassLoader;
      if (operator == "+" && (type == icl.TYPE_java_lang_String || operandType == icl.TYPE_java_lang_String)) {
        return this.compileStringConcatenation(locatable,type,operand,operands);
      }
      if (type == null) {
        type=this.compileGetValue(operand);
      }
 else {
        CodeContext.Inserter convertLhsInserter=this.codeContext.newInserter();
        IClass rhsType=this.compileGetValue(operand);
        type=this.binaryNumericPromotion(locatable,type,convertLhsInserter,rhsType);
        int opcode;
        if (type == IClass.INT) {
          opcode=iopcode;
        }
 else         if (type == IClass.LONG) {
          opcode=iopcode + 1;
        }
 else         if (type == IClass.FLOAT) {
          opcode=iopcode + 2;
        }
 else         if (type == IClass.DOUBLE) {
          opcode=iopcode + 3;
        }
 else {
          this.compileError("Unexpected promoted type \"" + type + "\"",locatable.getLocation());
          opcode=iopcode;
        }
        this.writeOpcode(locatable,opcode);
      }
    }
 while (operands.hasNext());
    return type;
  }
  if (operator == "<<" || operator == ">>" || operator == ">>>") {
    final int iopcode=(operator == "<<" ? Opcode.ISHL : operator == ">>" ? Opcode.ISHR : operator == ">>>" ? Opcode.IUSHR : Integer.MAX_VALUE);
    do {
      Rvalue operand=(Rvalue)operands.next();
      if (type == null) {
        type=this.compileGetValue(operand);
      }
 else {
        CodeContext.Inserter convertLhsInserter=this.codeContext.newInserter();
        final IClass rhsType=this.compileGetValue(operand);
        IClass promotedLhsType;
        this.codeContext.pushInserter(convertLhsInserter);
        try {
          promotedLhsType=this.unaryNumericPromotion(locatable,type);
        }
  finally {
          this.codeContext.popInserter();
        }
        if (promotedLhsType != IClass.INT && promotedLhsType != IClass.LONG) {
          this.compileError("Shift operation not allowed on operand type \"" + type + "\"",locatable.getLocation());
        }
        IClass promotedRhsType=this.unaryNumericPromotion(locatable,rhsType);
        if (promotedRhsType != IClass.INT && promotedRhsType != IClass.LONG) {
          this.compileError("Shift distance of type \"" + rhsType + "\" is not allowed",locatable.getLocation());
        }
        if (promotedRhsType == IClass.LONG)         this.writeOpcode(locatable,Opcode.L2I);
        this.writeOpcode(locatable,promotedLhsType == IClass.LONG ? iopcode + 1 : iopcode);
        type=promotedLhsType;
      }
    }
 while (operands.hasNext());
    return type;
  }
  throw new JaninoRuntimeException("Unexpected operator \"" + operator + "\"");
}
