{
  IClass iClassDeclaringType=type.getDeclaringIClass();
  if (iClassDeclaringType == null) {
    if (type.getAccess() == Access.PUBLIC) {
      return null;
    }
 else     if (type.getAccess() == Access.DEFAULT) {
      IClass iClassDeclaringContextBlockStatement;
      for (Scope s=contextScope; ; s=s.getEnclosingScope()) {
        if (s instanceof TypeDeclaration) {
          iClassDeclaringContextBlockStatement=this.resolve((TypeDeclaration)s);
          break;
        }
        if (s instanceof EnclosingScopeOfTypeDeclaration) {
          iClassDeclaringContextBlockStatement=this.resolve(((EnclosingScopeOfTypeDeclaration)s).typeDeclaration);
          break;
        }
      }
      String packageDeclaringType=Descriptor.getPackageName(type.getDescriptor());
      String contextPackage=Descriptor.getPackageName(iClassDeclaringContextBlockStatement.getDescriptor());
      if (packageDeclaringType == null ? contextPackage != null : !packageDeclaringType.equals(contextPackage))       return "\"" + type + "\" is inaccessible from this package";
      return null;
    }
 else {
      throw new JaninoRuntimeException("\"" + type + "\" has unexpected access \""+ type.getAccess()+ "\"");
    }
  }
  return this.internalCheckAccessible(iClassDeclaringType,type.getAccess(),contextScope);
}
