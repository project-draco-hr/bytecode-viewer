{
  IClass.IField[] res=new IClass.IField[fieldDeclaration.variableDeclarators.length];
  for (int i=0; i < res.length; ++i) {
    final VariableDeclarator variableDeclarator=fieldDeclaration.variableDeclarators[i];
    res[i]=this.resolve(fieldDeclaration.getDeclaringType()).new IField(){
      @Override public Access getAccess(){
switch (fieldDeclaration.modifiers.flags & Mod.PPP) {
case Mod.PRIVATE:
          return Access.PRIVATE;
case Mod.PROTECTED:
        return Access.PROTECTED;
case Mod.PACKAGE:
      return Access.DEFAULT;
case Mod.PUBLIC:
    return Access.PUBLIC;
default :
  throw new JaninoRuntimeException("Invalid access");
}
}
@Override public Annotation[] getAnnotations(){
return fieldDeclaration.modifiers.annotations;
}
@Override public boolean isStatic(){
return Mod.isStatic(fieldDeclaration.modifiers.flags);
}
@Override public IClass getType() throws CompileException {
return UnitCompiler.this.getType(fieldDeclaration.type).getArrayIClass(variableDeclarator.brackets,UnitCompiler.this.iClassLoader.TYPE_java_lang_Object);
}
@Override public String getName(){
return variableDeclarator.name;
}
@Override public Object getConstantValue() throws CompileException {
if (Mod.isFinal(fieldDeclaration.modifiers.flags) && variableDeclarator.optionalInitializer instanceof Rvalue) {
Object constantInitializerValue=UnitCompiler.this.getConstantValue((Rvalue)variableDeclarator.optionalInitializer);
if (constantInitializerValue != UnitCompiler.NOT_CONSTANT) {
  return UnitCompiler.this.assignmentConversion(variableDeclarator.optionalInitializer,constantInitializerValue,this.getType());
}
}
return UnitCompiler.NOT_CONSTANT;
}
}
;
}
return res;
}
