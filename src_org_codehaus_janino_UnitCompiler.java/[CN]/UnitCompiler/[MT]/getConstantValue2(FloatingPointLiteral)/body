{
  String v=fpl.value;
  char lastChar=v.charAt(v.length() - 1);
  if (lastChar == 'f' || lastChar == 'F') {
    v=v.substring(0,v.length() - 1);
    float fv;
    try {
      fv=Float.parseFloat(v);
    }
 catch (    NumberFormatException e) {
      throw new JaninoRuntimeException("SNO: parsing float literal '" + v + "': "+ e.getMessage(),e);
    }
    if (Float.isInfinite(fv)) {
      throw UnitCompiler.compileException(fpl,"Value of float literal '" + v + "' is out of range");
    }
    if (Float.isNaN(fv)) {
      throw new JaninoRuntimeException("SNO: parsing float literal '" + v + "' results in NaN");
    }
    if (fv == 0.0F) {
      for (int i=0; i < v.length(); ++i) {
        char c=v.charAt(i);
        if ("123456789".indexOf(c) != -1) {
          throw UnitCompiler.compileException(fpl,"Literal '" + v + "' is too small to be represented as a float");
        }
        if (c != '0' && c != '.')         break;
      }
    }
    return new Float(fv);
  }
  if (lastChar == 'd' || lastChar == 'D')   v=v.substring(0,v.length() - 1);
  double dv;
  try {
    dv=Double.parseDouble(v);
  }
 catch (  NumberFormatException e) {
    throw new JaninoRuntimeException("SNO: parsing double literal '" + v + "': "+ e.getMessage(),e);
  }
  if (Double.isInfinite(dv)) {
    throw UnitCompiler.compileException(fpl,"Value of double literal '" + v + "' is out of range");
  }
  if (Double.isNaN(dv)) {
    throw new JaninoRuntimeException("SNO: parsing double literal '" + v + "' results is NaN");
  }
  if (dv == 0.0F) {
    for (int i=0; i < v.length(); ++i) {
      char c=v.charAt(i);
      if ("123456789".indexOf(c) != -1) {
        throw UnitCompiler.compileException(fpl,"Literal '" + v + "' is too small to be represented as a double");
      }
      if (c != '0' && c != '.')       break;
    }
  }
  return new Double(dv);
}
