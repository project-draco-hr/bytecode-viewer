{
  ContinuableStatement continuedStatement=null;
  if (cs.optionalLabel == null) {
    for (Scope s=cs.getEnclosingScope(); s instanceof Statement || s instanceof CatchClause; s=s.getEnclosingScope()) {
      if (s instanceof ContinuableStatement) {
        continuedStatement=(ContinuableStatement)s;
        break;
      }
    }
    if (continuedStatement == null) {
      this.compileError("\"continue\" statement is not enclosed by a continuable statement",cs.getLocation());
      return false;
    }
  }
 else {
    for (Scope s=cs.getEnclosingScope(); s instanceof Statement || s instanceof CatchClause; s=s.getEnclosingScope()) {
      if (s instanceof LabeledStatement) {
        LabeledStatement ls=(LabeledStatement)s;
        if (ls.label.equals(cs.optionalLabel)) {
          Statement st=ls.body;
          while (st instanceof LabeledStatement)           st=((LabeledStatement)st).body;
          if (!(st instanceof ContinuableStatement)) {
            this.compileError("Labeled statement is not continuable",st.getLocation());
            return false;
          }
          continuedStatement=(ContinuableStatement)st;
          break;
        }
      }
    }
    if (continuedStatement == null) {
      this.compileError(("Statement \"continue " + cs.optionalLabel + "\" is not enclosed by a continuable statement with label \""+ cs.optionalLabel+ "\""),cs.getLocation());
      return false;
    }
  }
  if (continuedStatement.whereToContinue == null) {
    continuedStatement.whereToContinue=this.codeContext.new Offset();
  }
  this.leaveStatements(cs.getEnclosingScope(),continuedStatement.getEnclosingScope(),null);
  this.writeBranch(cs,Opcode.GOTO,continuedStatement.whereToContinue);
  return false;
}
