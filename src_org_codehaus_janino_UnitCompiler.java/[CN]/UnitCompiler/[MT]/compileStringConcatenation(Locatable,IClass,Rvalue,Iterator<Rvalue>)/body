{
  boolean operandOnStack;
  if (type != null) {
    this.stringConversion(locatable,type);
    operandOnStack=true;
  }
 else {
    operandOnStack=false;
  }
  List<Compilable> tmp=new ArrayList();
  do {
    Object cv=this.getConstantValue(operand);
    if (cv == UnitCompiler.NOT_CONSTANT) {
      final Rvalue finalOperand=operand;
      tmp.add(new Compilable(){
        @Override public void compile() throws CompileException {
          UnitCompiler.this.stringConversion(locatable,UnitCompiler.this.compileGetValue(finalOperand));
        }
      }
);
      operand=operands.hasNext() ? (Rvalue)operands.next() : null;
    }
 else {
      if (operands.hasNext()) {
        operand=(Rvalue)operands.next();
        Object cv2=this.getConstantValue(operand);
        if (cv2 != UnitCompiler.NOT_CONSTANT) {
          StringBuilder sb=new StringBuilder(cv.toString()).append(cv2);
          for (; ; ) {
            if (!operands.hasNext()) {
              operand=null;
              break;
            }
            operand=(Rvalue)operands.next();
            Object cv3=this.getConstantValue(operand);
            if (cv3 == UnitCompiler.NOT_CONSTANT)             break;
            sb.append(cv3);
          }
          cv=sb.toString();
        }
      }
 else {
        operand=null;
      }
      final String[] ss=UnitCompiler.makeUtf8Able(cv.toString());
      for (      final String s : ss) {
        tmp.add(new Compilable(){
          @Override public void compile() throws CompileException {
            UnitCompiler.this.pushConstant(locatable,s);
          }
        }
);
      }
    }
  }
 while (operand != null);
  if (tmp.size() <= (operandOnStack ? UnitCompiler.STRING_CONCAT_LIMIT - 1 : UnitCompiler.STRING_CONCAT_LIMIT)) {
    for (    Compilable c : tmp) {
      c.compile();
      if (operandOnStack) {
        this.invoke(locatable,this.iClassLoader.METH_java_lang_String__concat__java_lang_String);
      }
 else {
        operandOnStack=true;
      }
    }
    return this.iClassLoader.TYPE_java_lang_String;
  }
  Iterator<Compilable> it=tmp.iterator();
  if (operandOnStack) {
    this.writeOpcode(locatable,Opcode.NEW);
    this.writeConstantClassInfo(Descriptor.JAVA_LANG_STRINGBUILDER);
    this.writeOpcode(locatable,Opcode.DUP_X1);
    this.writeOpcode(locatable,Opcode.SWAP);
  }
 else {
    this.writeOpcode(locatable,Opcode.NEW);
    this.writeConstantClassInfo(Descriptor.JAVA_LANG_STRINGBUILDER);
    this.writeOpcode(locatable,Opcode.DUP);
    ((Compilable)it.next()).compile();
  }
  this.invoke(locatable,this.iClassLoader.CTOR_java_lang_StringBuilder__java_lang_String);
  while (it.hasNext()) {
    ((Compilable)it.next()).compile();
    this.invoke(locatable,this.iClassLoader.METH_java_lang_StringBuilder__append__java_lang_String);
  }
  this.invoke(locatable,this.iClassLoader.METH_java_lang_StringBuilder__toString);
  return this.iClassLoader.TYPE_java_lang_String;
}
