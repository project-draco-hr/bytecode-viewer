{
  if (constructorDeclarator.iConstructor != null)   return constructorDeclarator.iConstructor;
  constructorDeclarator.iConstructor=this.resolve(constructorDeclarator.getDeclaringType()).new IConstructor(){
    @Override public Access getAccess(){
switch (constructorDeclarator.modifiers.flags & Mod.PPP) {
case Mod.PRIVATE:
        return Access.PRIVATE;
case Mod.PROTECTED:
      return Access.PROTECTED;
case Mod.PACKAGE:
    return Access.DEFAULT;
case Mod.PUBLIC:
  return Access.PUBLIC;
default :
throw new JaninoRuntimeException("Invalid access");
}
}
@Override public Annotation[] getAnnotations(){
return constructorDeclarator.modifiers.annotations;
}
@Override public String getDescriptor2() throws CompileException {
if (!(constructorDeclarator.getDeclaringClass() instanceof InnerClassDeclaration)) {
return super.getDescriptor2();
}
List<String> parameterFds=new ArrayList();
IClass outerClass=UnitCompiler.this.resolve(constructorDeclarator.getDeclaringClass()).getOuterIClass();
if (outerClass != null) parameterFds.add(outerClass.getDescriptor());
for (IField sf : constructorDeclarator.getDeclaringClass().syntheticFields.values()) {
if (sf.getName().startsWith("val$")) parameterFds.add(sf.getType().getDescriptor());
}
FormalParameter[] parameters=constructorDeclarator.formalParameters.parameters;
for (int i=0; i < parameters.length; ++i) {
IClass parameterType=UnitCompiler.this.getType(parameters[i].type);
if (i == parameters.length - 1 && constructorDeclarator.formalParameters.variableArity) {
parameterType=parameterType.getArrayIClass(UnitCompiler.this.iClassLoader.TYPE_java_lang_Object);
}
parameterFds.add(parameterType.getDescriptor());
}
return new MethodDescriptor((String[])parameterFds.toArray(new String[parameterFds.size()]),Descriptor.VOID).toString();
}
@Override public boolean isVarargs(){
return Mod.isVarargs(constructorDeclarator.modifiers.flags);
}
@Override public IClass[] getParameterTypes2() throws CompileException {
FormalParameter[] parameters=constructorDeclarator.formalParameters.parameters;
IClass[] res=new IClass[parameters.length];
for (int i=0; i < parameters.length; ++i) {
IClass parameterType=UnitCompiler.this.getType(parameters[i].type);
if (i == parameters.length - 1 && constructorDeclarator.formalParameters.variableArity) {
parameterType=parameterType.getArrayIClass(UnitCompiler.this.iClassLoader.TYPE_java_lang_Object);
}
res[i]=parameterType;
}
return res;
}
@Override public IClass[] getThrownExceptions2() throws CompileException {
IClass[] res=new IClass[constructorDeclarator.thrownExceptions.length];
for (int i=0; i < res.length; ++i) {
res[i]=UnitCompiler.this.getType(constructorDeclarator.thrownExceptions[i]);
}
return res;
}
@Override public String toString(){
StringBuilder sb=new StringBuilder().append(constructorDeclarator.getDeclaringType().getClassName()).append('(');
FormalParameter[] parameters=constructorDeclarator.formalParameters.parameters;
for (int i=0; i < parameters.length; ++i) {
if (i != 0) sb.append(", ");
sb.append(parameters[i].toString(i == parameters.length - 1 && constructorDeclarator.formalParameters.variableArity));
}
return sb.append(')').toString();
}
}
;
return constructorDeclarator.iConstructor;
}
