{
  final IClass[] res=new IClass[1];
  AtomVisitor av=new AtomVisitor(){
    @Override public void visitPackage(    Package p){
      try {
        res[0]=UnitCompiler.this.getType2(p);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitArrayType(    ArrayType at){
      try {
        res[0]=UnitCompiler.this.getType2(at);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitBasicType(    BasicType bt){
      res[0]=UnitCompiler.this.getType2(bt);
    }
    @Override public void visitReferenceType(    ReferenceType rt){
      try {
        res[0]=UnitCompiler.this.getType2(rt);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitRvalueMemberType(    RvalueMemberType rmt){
      try {
        res[0]=UnitCompiler.this.getType2(rmt);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitSimpleType(    SimpleType st){
      res[0]=UnitCompiler.this.getType2(st);
    }
    @Override public void visitArrayLength(    ArrayLength al){
      res[0]=UnitCompiler.this.getType2(al);
    }
    @Override public void visitAssignment(    Assignment a){
      try {
        res[0]=UnitCompiler.this.getType2(a);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitUnaryOperation(    UnaryOperation uo){
      try {
        res[0]=UnitCompiler.this.getType2(uo);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitBinaryOperation(    BinaryOperation bo){
      try {
        res[0]=UnitCompiler.this.getType2(bo);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitCast(    Cast c){
      try {
        res[0]=UnitCompiler.this.getType2(c);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitClassLiteral(    ClassLiteral cl){
      res[0]=UnitCompiler.this.getType2(cl);
    }
    @Override public void visitConditionalExpression(    ConditionalExpression ce){
      try {
        res[0]=UnitCompiler.this.getType2(ce);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitCrement(    Crement c){
      try {
        res[0]=UnitCompiler.this.getType2(c);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitInstanceof(    Instanceof io){
      res[0]=UnitCompiler.this.getType2(io);
    }
    @Override public void visitMethodInvocation(    MethodInvocation mi){
      try {
        res[0]=UnitCompiler.this.getType2(mi);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitSuperclassMethodInvocation(    SuperclassMethodInvocation smi){
      try {
        res[0]=UnitCompiler.this.getType2(smi);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitIntegerLiteral(    IntegerLiteral il){
      res[0]=UnitCompiler.this.getType2(il);
    }
    @Override public void visitFloatingPointLiteral(    FloatingPointLiteral fpl){
      res[0]=UnitCompiler.this.getType2(fpl);
    }
    @Override public void visitBooleanLiteral(    BooleanLiteral bl){
      res[0]=UnitCompiler.this.getType2(bl);
    }
    @Override public void visitCharacterLiteral(    CharacterLiteral cl){
      res[0]=UnitCompiler.this.getType2(cl);
    }
    @Override public void visitStringLiteral(    StringLiteral sl){
      res[0]=UnitCompiler.this.getType2(sl);
    }
    @Override public void visitNullLiteral(    NullLiteral nl){
      res[0]=UnitCompiler.this.getType2(nl);
    }
    @Override public void visitSimpleConstant(    SimpleConstant sl){
      res[0]=UnitCompiler.this.getType2(sl);
    }
    @Override public void visitNewAnonymousClassInstance(    NewAnonymousClassInstance naci){
      res[0]=UnitCompiler.this.getType2(naci);
    }
    @Override public void visitNewArray(    NewArray na){
      try {
        res[0]=UnitCompiler.this.getType2(na);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitNewInitializedArray(    NewInitializedArray nia){
      try {
        res[0]=UnitCompiler.this.getType2(nia);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitNewClassInstance(    NewClassInstance nci){
      try {
        res[0]=UnitCompiler.this.getType2(nci);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitParameterAccess(    ParameterAccess pa){
      try {
        res[0]=UnitCompiler.this.getType2(pa);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitQualifiedThisReference(    QualifiedThisReference qtr){
      try {
        res[0]=UnitCompiler.this.getType2(qtr);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitThisReference(    ThisReference tr){
      try {
        res[0]=UnitCompiler.this.getType2(tr);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitAmbiguousName(    AmbiguousName an){
      try {
        res[0]=UnitCompiler.this.getType2(an);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitArrayAccessExpression(    ArrayAccessExpression aae){
      try {
        res[0]=UnitCompiler.this.getType2(aae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitFieldAccess(    FieldAccess fa){
      try {
        res[0]=UnitCompiler.this.getType2(fa);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitFieldAccessExpression(    FieldAccessExpression fae){
      try {
        res[0]=UnitCompiler.this.getType2(fae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitSuperclassFieldAccessExpression(    SuperclassFieldAccessExpression scfae){
      try {
        res[0]=UnitCompiler.this.getType2(scfae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitLocalVariableAccess(    LocalVariableAccess lva){
      res[0]=UnitCompiler.this.getType2(lva);
    }
    @Override public void visitParenthesizedExpression(    ParenthesizedExpression pe){
      try {
        res[0]=UnitCompiler.this.getType2(pe);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
  }
;
  try {
    a.accept(av);
    return res[0] != null ? res[0] : this.iClassLoader.TYPE_java_lang_Object;
  }
 catch (  UncheckedCompileException uce) {
    throw uce.compileException;
  }
}
