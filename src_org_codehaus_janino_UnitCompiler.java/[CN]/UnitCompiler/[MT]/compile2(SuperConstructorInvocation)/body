{
  ConstructorDeclarator declaringConstructor=(ConstructorDeclarator)sci.getEnclosingScope();
  this.writeOpcode(sci,Opcode.ALOAD_0);
  ClassDeclaration declaringClass=declaringConstructor.getDeclaringClass();
  IClass superclass=this.resolve(declaringClass).getSuperclass();
  Rvalue optionalEnclosingInstance;
  if (sci.optionalQualification != null) {
    optionalEnclosingInstance=sci.optionalQualification;
  }
 else {
    IClass outerIClassOfSuperclass=superclass.getOuterIClass();
    if (outerIClassOfSuperclass == null) {
      optionalEnclosingInstance=null;
    }
 else {
      optionalEnclosingInstance=new QualifiedThisReference(sci.getLocation(),new SimpleType(sci.getLocation(),outerIClassOfSuperclass));
      optionalEnclosingInstance.setEnclosingBlockStatement(sci);
    }
  }
  this.invokeConstructor(sci,declaringConstructor,optionalEnclosingInstance,superclass,sci.arguments);
  return true;
}
