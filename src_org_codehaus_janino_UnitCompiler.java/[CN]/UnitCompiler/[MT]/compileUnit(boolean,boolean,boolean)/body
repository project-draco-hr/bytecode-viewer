{
  this.debugSource=debugSource;
  this.debugLines=debugLines;
  this.debugVars=debugVars;
  for (  ImportDeclaration id : this.compilationUnit.importDeclarations) {
    try {
      id.accept(new ImportVisitor(){
        @Override public void visitSingleTypeImportDeclaration(        SingleTypeImportDeclaration stid){
        }
        @Override public void visitTypeImportOnDemandDeclaration(        TypeImportOnDemandDeclaration tiodd){
        }
        @Override public void visitSingleStaticImportDeclaration(        SingleStaticImportDeclaration ssid){
          try {
            UnitCompiler.this.import2(ssid);
          }
 catch (          CompileException e) {
            throw new UncheckedCompileException(e);
          }
        }
        @Override public void visitStaticImportOnDemandDeclaration(        StaticImportOnDemandDeclaration siodd){
          try {
            UnitCompiler.this.import2(siodd);
          }
 catch (          CompileException e) {
            throw new UncheckedCompileException(e);
          }
        }
      }
);
    }
 catch (    UncheckedCompileException uce) {
      throw uce.compileException;
    }
  }
  this.generatedClassFiles=new ArrayList();
  for (  PackageMemberTypeDeclaration pmtd : this.compilationUnit.packageMemberTypeDeclarations) {
    this.compile(pmtd);
  }
  if (this.compileErrorCount > 0) {
    throw new CompileException((this.compileErrorCount + " error(s) while compiling unit \"" + this.compilationUnit.optionalFileName+ "\""),null);
  }
  List<ClassFile> l=this.generatedClassFiles;
  return (ClassFile[])l.toArray(new ClassFile[l.size()]);
}
