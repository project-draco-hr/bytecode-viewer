{
  ClassFile.MethodInfo mi=cf.addMethodInfo(new Modifiers((short)(Mod.PUBLIC | Mod.SYNTHETIC)),base.getName(),base.getDescriptor());
  IClass[] thrownExceptions=base.getThrownExceptions();
  if (thrownExceptions.length > 0) {
    final short eani=cf.addConstantUtf8Info("Exceptions");
    short[] tecciis=new short[thrownExceptions.length];
    for (int i=0; i < thrownExceptions.length; ++i) {
      tecciis[i]=cf.addConstantClassInfo(thrownExceptions[i].getDescriptor());
    }
    mi.addAttribute(new ClassFile.ExceptionsAttribute(eani,tecciis));
  }
  final CodeContext codeContext=new CodeContext(mi.getClassFile(),base.toString());
  final CodeContext savedCodeContext=this.replaceCodeContext(codeContext);
  codeContext.saveLocalVariables();
  codeContext.allocateLocalVariable((short)1,"this",override.getDeclaringIClass());
  IClass[] paramTypes=override.getParameterTypes();
  LocalVariableSlot[] locals=new LocalVariableSlot[paramTypes.length];
  for (int i=0; i < paramTypes.length; ++i) {
    locals[i]=codeContext.allocateLocalVariable(Descriptor.size(paramTypes[i].getDescriptor()),"param" + i,paramTypes[i]);
  }
  this.writeOpcode(Located.NOWHERE,Opcode.ALOAD_0);
  for (  LocalVariableSlot l : locals)   this.load(Located.NOWHERE,l.getType(),l.getSlotIndex());
  this.invoke(Located.NOWHERE,override);
  this.writeOpcode(Located.NOWHERE,Opcode.ARETURN);
  this.replaceCodeContext(savedCodeContext);
  codeContext.flowAnalysis(override.getName());
  mi.addAttribute(new ClassFile.AttributeInfo(cf.addConstantUtf8Info("Code")){
    @Override protected void storeBody(    DataOutputStream dos) throws IOException {
      codeContext.storeCodeAttributeBody(dos,(short)0,(short)0);
    }
  }
);
}
