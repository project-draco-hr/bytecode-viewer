{
  if (methodDeclarator.iMethod != null)   return methodDeclarator.iMethod;
  methodDeclarator.iMethod=this.resolve(methodDeclarator.getDeclaringType()).new IMethod(){
    @Override public Access getAccess(){
switch (methodDeclarator.modifiers.flags & Mod.PPP) {
case Mod.PRIVATE:
        return Access.PRIVATE;
case Mod.PROTECTED:
      return Access.PROTECTED;
case Mod.PACKAGE:
    return Access.DEFAULT;
case Mod.PUBLIC:
  return Access.PUBLIC;
default :
throw new JaninoRuntimeException("Invalid access");
}
}
@Override public Annotation[] getAnnotations(){
return methodDeclarator.modifiers.annotations;
}
@Override public boolean isVarargs(){
return Mod.isVarargs(methodDeclarator.modifiers.flags);
}
@Override public IClass[] getParameterTypes2() throws CompileException {
FormalParameter[] parameters=methodDeclarator.formalParameters.parameters;
IClass[] res=new IClass[parameters.length];
for (int i=0; i < parameters.length; ++i) {
IClass parameterType=UnitCompiler.this.getType(parameters[i].type);
if (i == parameters.length - 1 && methodDeclarator.formalParameters.variableArity) {
parameterType=parameterType.getArrayIClass(UnitCompiler.this.iClassLoader.TYPE_java_lang_Object);
}
res[i]=parameterType;
}
return res;
}
@Override public IClass[] getThrownExceptions2() throws CompileException {
IClass[] res=new IClass[methodDeclarator.thrownExceptions.length];
for (int i=0; i < res.length; ++i) {
res[i]=UnitCompiler.this.getType(methodDeclarator.thrownExceptions[i]);
}
return res;
}
@Override public boolean isStatic(){
return Mod.isStatic(methodDeclarator.modifiers.flags);
}
@Override public boolean isAbstract(){
return ((methodDeclarator.getDeclaringType() instanceof InterfaceDeclaration) || Mod.isAbstract(methodDeclarator.modifiers.flags));
}
@Override public IClass getReturnType() throws CompileException {
return UnitCompiler.this.getReturnType(methodDeclarator);
}
@Override public String getName(){
return methodDeclarator.name;
}
}
;
return methodDeclarator.iMethod;
}
