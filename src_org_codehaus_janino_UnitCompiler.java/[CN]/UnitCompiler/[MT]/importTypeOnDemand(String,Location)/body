{
{
    IClass importedClass=(IClass)this.onDemandImportableTypes.get(simpleTypeName);
    if (importedClass != null)     return importedClass;
  }
  if (this.typeImportsOnDemand == null) {
    this.typeImportsOnDemand=new ArrayList();
    this.typeImportsOnDemand.add(new String[]{"java","lang"});
    for (    ImportDeclaration id : this.compilationUnit.importDeclarations) {
      id.accept(new ImportVisitor(){
        @Override public void visitSingleTypeImportDeclaration(        SingleTypeImportDeclaration stid){
        }
        @Override public void visitTypeImportOnDemandDeclaration(        TypeImportOnDemandDeclaration tiodd){
          UnitCompiler.this.typeImportsOnDemand.add(tiodd.identifiers);
        }
        @Override public void visitSingleStaticImportDeclaration(        SingleStaticImportDeclaration ssid){
        }
        @Override public void visitStaticImportOnDemandDeclaration(        StaticImportOnDemandDeclaration siodd){
        }
      }
);
    }
  }
  IClass importedClass=null;
  for (  String[] packageComponents : this.typeImportsOnDemand) {
    String[] typeComponents=UnitCompiler.concat(packageComponents,simpleTypeName);
    IClass iClass=this.findTypeByFullyQualifiedName(location,typeComponents);
    if (iClass != null) {
      if (importedClass != null && importedClass != iClass) {
        this.compileError("Ambiguous class name: \"" + importedClass + "\" vs. \""+ iClass+ "\"",location);
      }
      importedClass=iClass;
    }
  }
  if (importedClass == null)   return null;
  this.onDemandImportableTypes.put(simpleTypeName,importedClass);
  return importedClass;
}
