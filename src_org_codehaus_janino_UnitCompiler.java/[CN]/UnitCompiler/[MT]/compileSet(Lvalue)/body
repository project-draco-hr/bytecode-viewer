{
  LvalueVisitor lvv=new LvalueVisitor(){
    @Override public void visitAmbiguousName(    AmbiguousName an){
      try {
        UnitCompiler.this.compileSet2(an);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitArrayAccessExpression(    ArrayAccessExpression aae){
      try {
        UnitCompiler.this.compileSet2(aae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitFieldAccess(    FieldAccess fa){
      try {
        UnitCompiler.this.compileSet2(fa);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitFieldAccessExpression(    FieldAccessExpression fae){
      try {
        UnitCompiler.this.compileSet2(fae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitSuperclassFieldAccessExpression(    SuperclassFieldAccessExpression scfae){
      try {
        UnitCompiler.this.compileSet2(scfae);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
    @Override public void visitLocalVariableAccess(    LocalVariableAccess lva){
      UnitCompiler.this.compileSet2(lva);
    }
    @Override public void visitParenthesizedExpression(    ParenthesizedExpression pe){
      try {
        UnitCompiler.this.compileSet2(pe);
      }
 catch (      CompileException e) {
        throw new UncheckedCompileException(e);
      }
    }
  }
;
  try {
    lv.accept(lvv);
  }
 catch (  UncheckedCompileException uce) {
    throw uce.compileException;
  }
}
