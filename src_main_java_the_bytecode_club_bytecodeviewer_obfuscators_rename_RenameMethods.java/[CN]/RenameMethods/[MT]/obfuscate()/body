{
  int stringLength=getStringLength();
  System.out.println("Obfuscating method names...");
  for (  ClassNode c : BytecodeViewer.getLoadedClasses()) {
    methodLoop:     for (    Object o : c.methods.toArray()) {
      MethodNode m=(MethodNode)o;
      if ((m.access & Opcodes.ACC_NATIVE) != 0)       continue methodLoop;
      if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {
        if (!m.name.equals("main") && !m.name.equals("<init>") && !m.name.equals("<clinit>")) {
          String newName=generateUniqueName(stringLength);
          BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));
        }
      }
    }
  }
  System.out.println("Obfuscated method names.");
}
