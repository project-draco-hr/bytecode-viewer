{
  PluginConsole frame=new PluginConsole("Malicious Code Scanner");
  BytecodeViewer.viewer.setC(true);
  for (  ClassNode classNode : classNodeList) {
    for (    Object o : classNode.methods.toArray()) {
      MethodNode m=(MethodNode)o;
      InsnList iList=m.instructions;
      for (      AbstractInsnNode a : iList.toArray()) {
        if (a instanceof MethodInsnNode) {
          final MethodInsnNode min=(MethodInsnNode)a;
          if ((ORE && min.owner.startsWith("java/lang/reflect")) || (ONE && min.owner.startsWith("java/net")) || (ORU && min.owner.equals("java/lang/Runtime"))|| (OIO && min.owner.startsWith("java/io"))) {
            frame.appendText("Found Method call to " + min.owner + "."+ min.name+ "("+ min.desc+ ") at "+ classNode.name+ "."+ m.name+ "("+ m.desc+ ")");
          }
        }
        if (a instanceof LdcInsnNode) {
          if (((LdcInsnNode)a).cst instanceof String) {
            final String s=(String)((LdcInsnNode)a).cst;
            if ((LWW && s.contains("www.")) || (LHT && s.contains("http://")) || (LHS && s.contains("https://"))|| (ORE && s.contains("java/lang/Runtime"))|| (ORE && s.contains("java.lang.Runtime"))|| (LIP && s.matches("\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b"))) {
              frame.appendText("Found LDC \"" + s + "\" at "+ classNode.name+ "."+ m.name+ "("+ m.desc+ ")");
            }
          }
        }
      }
    }
  }
  BytecodeViewer.viewer.setC(false);
  frame.setVisible(true);
}
