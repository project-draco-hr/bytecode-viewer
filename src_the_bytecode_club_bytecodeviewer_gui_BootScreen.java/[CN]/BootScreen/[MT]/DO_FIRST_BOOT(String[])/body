{
  this.setVisible(true);
  if (FIRST_BOOT)   return;
  FIRST_BOOT=true;
  boolean foundAtleastOne=false;
  setTitle("Bytecode Viewer Boot Screen - Checking Libraries...");
  File libsDirectory=new File(BytecodeViewer.libsDirectory);
  try {
    int completedCheck=0;
    List<String> urlList=new ArrayList<String>();
    HTTPRequest req=new HTTPRequest(new URL("https://github.com/Konloch/bytecode-viewer/tree/master/libs"));
    for (    String s : req.read())     if (s.contains("href=\"/Konloch/bytecode-viewer/blob/master/libs/")) {
      urlList.add("https://github.com" + s.split("<a href=")[1].split("\"")[1]);
      foundAtleastOne=true;
    }
    if (!foundAtleastOne) {
      new the.bytecode.club.bytecodeviewer.api.ExceptionUI("Bytecode Viewer ran into an issue, for some reason github is not returning what we're expecting. Please try rebooting, if this issue persists please contact @Konloch.");
      return;
    }
    if (args.length >= 1)     if (args[0].equalsIgnoreCase("-clean"))     libsDirectory.delete();
    if (!libsDirectory.exists())     libsDirectory.mkdir();
    List<String> libsList=new ArrayList<String>();
    List<String> libsFileList=new ArrayList<String>();
    for (    File f : libsDirectory.listFiles()) {
      libsList.add(f.getName());
      libsFileList.add(f.getAbsolutePath());
    }
    progressBar.setMaximum(urlList.size());
    for (    String s : urlList) {
      String fileName=s.substring("https://github.com/Konloch/bytecode-viewer/blob/master/libs/".length(),s.length());
      if (!libsList.contains(fileName)) {
        setTitle("Bytecode Viewer Boot Screen - Downloading " + fileName);
        boolean passed=false;
        while (!passed) {
          InputStream is=null;
          FileOutputStream fos=null;
          try {
            is=new URL("https://github.com/Konloch/bytecode-viewer/raw/master/libs/" + fileName).openConnection().getInputStream();
            fos=new FileOutputStream(BytecodeViewer.libsDirectory + BytecodeViewer.fs + fileName);
            System.out.println("Downloading from " + s);
            byte[] buffer=new byte[8192];
            int len;
            int downloaded=0;
            boolean flag=false;
            while ((len=is.read(buffer)) > 0) {
              fos.write(buffer,0,len);
              fos.flush();
              downloaded+=8192;
              int mbs=downloaded / 1048576;
              if (mbs % 5 == 0 && mbs != 0) {
                if (!flag)                 System.out.println("Downloaded " + mbs + "MBs so far");
                flag=true;
              }
 else               flag=false;
            }
            libsFileList.add(BytecodeViewer.libsDirectory + BytecodeViewer.fs + fileName);
          }
  finally {
            try {
              if (is != null) {
                is.close();
              }
            }
  finally {
              if (fos != null) {
                fos.flush();
              }
              if (fos != null) {
                fos.close();
              }
            }
          }
          System.out.println("Download finished!");
          passed=true;
        }
      }
      completedCheck++;
      progressBar.setValue(completedCheck);
    }
    if (BytecodeViewer.deleteForiegnLibraries) {
      setTitle("Bytecode Viewer Boot Screen - Checking & Deleting Foriegn/Outdated Libraries...");
      for (      String s : libsFileList) {
        File f=new File(s);
        boolean delete=true;
        for (        String urlS : urlList) {
          String fileName=urlS.substring("https://github.com/Konloch/bytecode-viewer/blob/master/libs/".length(),urlS.length());
          if (fileName.equals(f.getName())) {
            delete=false;
          }
        }
        if (delete) {
          f.delete();
          System.out.println("Detected & Deleted Foriegn/Outdated Jar/File: " + f.getName());
        }
      }
    }
    setTitle("Bytecode Viewer Boot Screen - Loading Libraries...");
    for (    String s : libsFileList) {
      if (s.endsWith(".jar")) {
        File f=new File(s);
        if (f.exists()) {
          setTitle("Bytecode Viewer Boot Screen - Loading Library " + f.getName());
          System.out.println(f.getName());
          try {
            JarFile jarFile=new JarFile(s);
            Enumeration<JarEntry> e=jarFile.entries();
            ClassPathHack.addFile(f);
            while (e.hasMoreElements()) {
              JarEntry je=(JarEntry)e.nextElement();
              if (je.isDirectory() || !je.getName().endsWith(".class")) {
                continue;
              }
              try {
                String className=je.getName().substring(0,je.getName().length() - 6);
                className=className.replace('/','.');
                ClassLoader.getSystemClassLoader().loadClass(className);
              }
 catch (              java.lang.VerifyError|java.lang.ExceptionInInitializerError|java.lang.IncompatibleClassChangeError|java.lang.NoClassDefFoundError|Exception e2) {
              }
            }
            jarFile.close();
          }
 catch (          java.util.zip.ZipException e) {
            e.printStackTrace();
            f.delete();
            BytecodeViewer.showMessage("Error, Library " + f.getName() + " is corrupt, please restart to redownload it.");
          }
        }
      }
    }
    setTitle("Bytecode Viewer Boot Screen - Booting!");
  }
 catch (  Exception e) {
    Settings.saveGUI();
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    e.printStackTrace();
    new the.bytecode.club.bytecodeviewer.api.ExceptionUI("Bytecode Viewer ran into an error while booting, trying to force it anyways." + BytecodeViewer.nl + BytecodeViewer.nl+ "Please ensure you have an active internet connection and restart BCV. If this presists please visit http://github.com/Konloch/Bytecode-Viewer or http://bytecodeviewer.com"+ BytecodeViewer.nl+ BytecodeViewer.nl+ sw.toString());
  }
  setTitle("Bytecode Viewer Boot Screen - Finished");
  BytecodeViewer.BOOT(args);
  if (BytecodeViewer.pingback) {
    BytecodeViewer.PingBack.start();
    BytecodeViewer.pingback=true;
  }
  if (BytecodeViewer.viewer.chckbxmntmNewCheckItem_12.isSelected())   BytecodeViewer.versionChecker.start();
  this.setVisible(false);
}
