{
  try {
    if (cn.version < 49) {
      b=fixBytes(b);
    }
    final byte[] bytesToUse=b;
    final Map<String,byte[]> loadedClasses=BytecodeViewer.getLoadedBytes();
    DecompilerSettings settings=getDecompilerSettings();
    MetadataSystem metadataSystem=new MetadataSystem(new ITypeLoader(){
      private InputTypeLoader backLoader=new InputTypeLoader();
      @Override public boolean tryLoadType(      String s,      Buffer buffer){
        if (s.equals(cn.name)) {
          buffer.putByteArray(bytesToUse,0,bytesToUse.length);
          buffer.position(0);
          return true;
        }
 else {
          byte[] toUse=loadedClasses.get(s + ".class");
          if (toUse != null) {
            buffer.putByteArray(toUse,0,toUse.length);
            buffer.position(0);
            return true;
          }
 else {
            return backLoader.tryLoadType(s,buffer);
          }
        }
      }
    }
);
    TypeReference type=metadataSystem.lookupType(cn.name);
    DecompilationOptions decompilationOptions=new DecompilationOptions();
    decompilationOptions.setSettings(DecompilerSettings.javaDefaults());
    decompilationOptions.setFullDecompilation(true);
    TypeDefinition resolvedType=null;
    if (type == null || ((resolvedType=type.resolve()) == null)) {
      throw new Exception("Unable to resolve type.");
    }
    StringWriter stringwriter=new StringWriter();
    settings.getLanguage().decompileType(resolvedType,new PlainTextOutput(stringwriter),decompilationOptions);
    String decompiledSource=stringwriter.toString();
    return decompiledSource;
  }
 catch (  Throwable e) {
    return parseException(e);
  }
}
