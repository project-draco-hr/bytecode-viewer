{
  if (BytecodeViewer.python.equals("")) {
    BytecodeViewer.showMessage("You need to set your Python (or PyPy for speed) 2.7 executable path.");
    BytecodeViewer.viewer.pythonC();
  }
  String s="Bytecode Viewer Version: " + BytecodeViewer.version + BytecodeViewer.nl+ BytecodeViewer.nl+ "Please send this to konloch@gmail.com. "+ BytecodeViewer.nl+ BytecodeViewer.nl;
  final File tempDirectory=new File(BytecodeViewer.tempDirectory + BytecodeViewer.fs + MiscUtils.randomString(32)+ BytecodeViewer.fs);
  tempDirectory.mkdir();
  final File tempJar=new File(BytecodeViewer.tempDirectory + BytecodeViewer.fs + "temp"+ MiscUtils.randomString(32)+ ".jar");
  JarUtils.saveAsJarClassesOnly(BytecodeViewer.getLoadedClasses(),tempJar.getAbsolutePath());
  BytecodeViewer.sm.stopBlocking();
  try {
    ProcessBuilder pb=new ProcessBuilder(BytecodeViewer.python,"-O",BytecodeViewer.krakatauWorkingDirectory + BytecodeViewer.fs + "disassemble.py","-path",tempJar.getAbsolutePath(),"-out",tempDirectory.getAbsolutePath(),cn.name + ".class");
    Process process=pb.start();
    BytecodeViewer.createdProcesses.add(process);
    InputStream is=process.getInputStream();
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String log="Process:" + BytecodeViewer.nl + BytecodeViewer.nl;
    String line;
    while ((line=br.readLine()) != null) {
      log+=BytecodeViewer.nl + line;
    }
    br.close();
    log+=BytecodeViewer.nl + BytecodeViewer.nl + "Error:"+ BytecodeViewer.nl+ BytecodeViewer.nl;
    is=process.getErrorStream();
    isr=new InputStreamReader(is);
    br=new BufferedReader(isr);
    while ((line=br.readLine()) != null) {
      log+=BytecodeViewer.nl + line;
    }
    br.close();
    int exitValue=process.waitFor();
    log+=BytecodeViewer.nl + BytecodeViewer.nl + "Exit Value is "+ exitValue;
    s=log;
    s=DiskReader.loadAsString(tempDirectory.getAbsolutePath() + BytecodeViewer.fs + cn.name+ ".j");
    tempDirectory.delete();
    tempJar.delete();
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    e.printStackTrace();
    s+=BytecodeViewer.nl + "Bytecode Viewer Version: " + BytecodeViewer.version+ BytecodeViewer.nl+ BytecodeViewer.nl+ sw.toString();
  }
 finally {
    BytecodeViewer.sm.setBlocking();
  }
  return s;
}
