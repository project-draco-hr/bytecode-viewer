{
  try {
    treeRoot.removeAllChildren();
    for (    FileContainer container : BytecodeViewer.files) {
      MyTreeNode root=new MyTreeNode(container.name);
      treeRoot.add(root);
      ImageRenderer renderer=new ImageRenderer();
      tree.setCellRenderer(renderer);
      if (!container.files.isEmpty()) {
        for (        final Entry<String,byte[]> entry : container.files.entrySet()) {
          String name=entry.getKey();
          final String[] spl=name.split("/");
          if (spl.length < 2) {
            root.add(new MyTreeNode(name));
          }
 else {
            MyTreeNode parent=root;
            for (            final String s : spl) {
              MyTreeNode child=null;
              for (int i=0; i < parent.getChildCount(); i++) {
                if (((MyTreeNode)parent.getChildAt(i)).getUserObject().equals(s)) {
                  child=(MyTreeNode)parent.getChildAt(i);
                  break;
                }
              }
              if (child == null) {
                child=new MyTreeNode(s);
                parent.add(child);
              }
              parent=child;
            }
          }
        }
      }
    }
    treeRoot.sort();
    tree.expandPath(new TreePath(tree.getModel().getRoot()));
    tree.updateUI();
  }
 catch (  java.util.ConcurrentModificationException e) {
  }
}
