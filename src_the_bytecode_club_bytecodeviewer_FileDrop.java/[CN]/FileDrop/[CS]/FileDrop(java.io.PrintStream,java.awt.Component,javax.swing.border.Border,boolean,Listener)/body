{
  if (supportsDnD()) {
    dropListener=new java.awt.dnd.DropTargetListener(){
      public void dragEnter(      final java.awt.dnd.DropTargetDragEvent evt){
        log(out,"FileDrop: dragEnter event.");
        if (isDragOk(out,evt)) {
          if (c instanceof javax.swing.JComponent) {
            final javax.swing.JComponent jc=(javax.swing.JComponent)c;
            normalBorder=jc.getBorder();
            log(out,"FileDrop: normal border saved.");
            jc.setBorder(dragBorder);
            log(out,"FileDrop: drag border set.");
          }
          evt.acceptDrag(java.awt.dnd.DnDConstants.ACTION_COPY);
          log(out,"FileDrop: event accepted.");
        }
 else {
          evt.rejectDrag();
          log(out,"FileDrop: event rejected.");
        }
      }
      public void dragOver(      final java.awt.dnd.DropTargetDragEvent evt){
      }
      public void drop(      final java.awt.dnd.DropTargetDropEvent evt){
        log(out,"FileDrop: drop event.");
        try {
          final java.awt.datatransfer.Transferable tr=evt.getTransferable();
          if (tr.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.javaFileListFlavor)) {
            evt.acceptDrop(java.awt.dnd.DnDConstants.ACTION_COPY);
            log(out,"FileDrop: file list accepted.");
            final java.util.List fileList=(java.util.List)tr.getTransferData(java.awt.datatransfer.DataFlavor.javaFileListFlavor);
            final java.util.Iterator iterator=fileList.iterator();
            final java.io.File[] filesTemp=new java.io.File[fileList.size()];
            fileList.toArray(filesTemp);
            final java.io.File[] files=filesTemp;
            if (listener != null) {
              listener.filesDropped(files);
            }
            evt.getDropTargetContext().dropComplete(true);
            log(out,"FileDrop: drop complete.");
          }
 else {
            final DataFlavor[] flavors=tr.getTransferDataFlavors();
            boolean handled=false;
            for (int zz=0; zz < flavors.length; zz++) {
              if (flavors[zz].isRepresentationClassReader()) {
                evt.acceptDrop(java.awt.dnd.DnDConstants.ACTION_COPY);
                log(out,"FileDrop: reader accepted.");
                final Reader reader=flavors[zz].getReaderForText(tr);
                final BufferedReader br=new BufferedReader(reader);
                if (listener != null) {
                  listener.filesDropped(createFileArray(br,out));
                }
                evt.getDropTargetContext().dropComplete(true);
                log(out,"FileDrop: drop complete.");
                handled=true;
                break;
              }
            }
            if (!handled) {
              log(out,"FileDrop: not a file list or reader - abort.");
              evt.rejectDrop();
            }
          }
        }
 catch (        final java.io.IOException io) {
          log(out,"FileDrop: IOException - abort:");
          new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(io);
          evt.rejectDrop();
        }
catch (        final java.awt.datatransfer.UnsupportedFlavorException ufe) {
          log(out,"FileDrop: UnsupportedFlavorException - abort:");
          new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(ufe);
          evt.rejectDrop();
        }
 finally {
          if (c instanceof javax.swing.JComponent) {
            final javax.swing.JComponent jc=(javax.swing.JComponent)c;
            jc.setBorder(normalBorder);
            log(out,"FileDrop: normal border restored.");
          }
        }
      }
      public void dragExit(      final java.awt.dnd.DropTargetEvent evt){
        log(out,"FileDrop: dragExit event.");
        if (c instanceof javax.swing.JComponent) {
          final javax.swing.JComponent jc=(javax.swing.JComponent)c;
          jc.setBorder(normalBorder);
          log(out,"FileDrop: normal border restored.");
        }
      }
      public void dropActionChanged(      final java.awt.dnd.DropTargetDragEvent evt){
        log(out,"FileDrop: dropActionChanged event.");
        if (isDragOk(out,evt)) {
          evt.acceptDrag(java.awt.dnd.DnDConstants.ACTION_COPY);
          log(out,"FileDrop: event accepted.");
        }
 else {
          evt.rejectDrag();
          log(out,"FileDrop: event rejected.");
        }
      }
    }
;
    makeDropTarget(out,c,recursive);
  }
 else {
    log(out,"FileDrop: Drag and drop is not supported with this JVM");
  }
}
