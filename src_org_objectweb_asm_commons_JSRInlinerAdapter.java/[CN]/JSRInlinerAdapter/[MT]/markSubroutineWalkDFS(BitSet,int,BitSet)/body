{
  while (true) {
    AbstractInsnNode node=instructions.get(index);
    if (sub.get(index)) {
      return;
    }
    sub.set(index);
    if (anyvisited.get(index)) {
      dualCitizens.set(index);
      if (LOGGING) {
        log("Instruction #" + index + " is dual citizen.");
      }
    }
    anyvisited.set(index);
    if (node.type() == AbstractInsnNode.JUMP_INSN && node.opcode() != JSR) {
      JumpInsnNode jnode=(JumpInsnNode)node;
      int destidx=instructions.indexOf(jnode.label);
      markSubroutineWalkDFS(sub,destidx,anyvisited);
    }
    if (node.type() == AbstractInsnNode.TABLESWITCH_INSN) {
      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;
      int destidx=instructions.indexOf(tsnode.dflt);
      markSubroutineWalkDFS(sub,destidx,anyvisited);
      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {
        LabelNode l=tsnode.labels.get(i);
        destidx=instructions.indexOf(l);
        markSubroutineWalkDFS(sub,destidx,anyvisited);
      }
    }
    if (node.type() == AbstractInsnNode.LOOKUPSWITCH_INSN) {
      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;
      int destidx=instructions.indexOf(lsnode.dflt);
      markSubroutineWalkDFS(sub,destidx,anyvisited);
      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {
        LabelNode l=lsnode.labels.get(i);
        destidx=instructions.indexOf(l);
        markSubroutineWalkDFS(sub,destidx,anyvisited);
      }
    }
switch (instructions.get(index).opcode()) {
case GOTO:
case RET:
case TABLESWITCH:
case LOOKUPSWITCH:
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
case RETURN:
case ATHROW:
      return;
  }
  index++;
  if (index >= instructions.size()) {
    return;
  }
}
}
