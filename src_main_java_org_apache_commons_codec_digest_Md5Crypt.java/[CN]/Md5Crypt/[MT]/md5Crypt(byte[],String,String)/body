{
  final int keyLen=keyBytes.length;
  String saltString;
  if (salt == null) {
    saltString=B64.getRandomSalt(8);
  }
 else {
    final Pattern p=Pattern.compile("^" + prefix.replace("$","\\$") + "([\\.\\/a-zA-Z0-9]{1,8}).*");
    final Matcher m=p.matcher(salt);
    if (m == null || !m.find()) {
      throw new IllegalArgumentException("Invalid salt value: " + salt);
    }
    saltString=m.group(1);
  }
  final byte[] saltBytes=saltString.getBytes(Charsets.UTF_8);
  final MessageDigest ctx=DigestUtils.getMd5Digest();
  ctx.update(keyBytes);
  ctx.update(prefix.getBytes(Charsets.UTF_8));
  ctx.update(saltBytes);
  MessageDigest ctx1=DigestUtils.getMd5Digest();
  ctx1.update(keyBytes);
  ctx1.update(saltBytes);
  ctx1.update(keyBytes);
  byte[] finalb=ctx1.digest();
  int ii=keyLen;
  while (ii > 0) {
    ctx.update(finalb,0,ii > 16 ? 16 : ii);
    ii-=16;
  }
  Arrays.fill(finalb,(byte)0);
  ii=keyLen;
  final int j=0;
  while (ii > 0) {
    if ((ii & 1) == 1) {
      ctx.update(finalb[j]);
    }
 else {
      ctx.update(keyBytes[j]);
    }
    ii>>=1;
  }
  final StringBuilder passwd=new StringBuilder(prefix + saltString + "$");
  finalb=ctx.digest();
  for (int i=0; i < ROUNDS; i++) {
    ctx1=DigestUtils.getMd5Digest();
    if ((i & 1) != 0) {
      ctx1.update(keyBytes);
    }
 else {
      ctx1.update(finalb,0,BLOCKSIZE);
    }
    if (i % 3 != 0) {
      ctx1.update(saltBytes);
    }
    if (i % 7 != 0) {
      ctx1.update(keyBytes);
    }
    if ((i & 1) != 0) {
      ctx1.update(finalb,0,BLOCKSIZE);
    }
 else {
      ctx1.update(keyBytes);
    }
    finalb=ctx1.digest();
  }
  B64.b64from24bit(finalb[0],finalb[6],finalb[12],4,passwd);
  B64.b64from24bit(finalb[1],finalb[7],finalb[13],4,passwd);
  B64.b64from24bit(finalb[2],finalb[8],finalb[14],4,passwd);
  B64.b64from24bit(finalb[3],finalb[9],finalb[15],4,passwd);
  B64.b64from24bit(finalb[4],finalb[10],finalb[5],4,passwd);
  B64.b64from24bit((byte)0,(byte)0,finalb[11],2,passwd);
  ctx.reset();
  ctx1.reset();
  Arrays.fill(keyBytes,(byte)0);
  Arrays.fill(saltBytes,(byte)0);
  Arrays.fill(finalb,(byte)0);
  return passwd.toString();
}
