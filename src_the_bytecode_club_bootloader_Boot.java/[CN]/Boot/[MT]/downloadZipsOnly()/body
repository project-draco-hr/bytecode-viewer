{
  for (  String s : urlList) {
    String fileName=s.substring("https://github.com/Konloch/bytecode-viewer/blob/master/libs/".length(),s.length());
    File file=new File(libsDir(),fileName);
    boolean passed=false;
    while (!passed) {
      if (!libsList.contains(fileName) && fileName.endsWith(".zip")) {
        downloading=true;
        setState("Bytecode Viewer Boot Screen - Downloading " + fileName + "...");
        System.out.println("Downloading " + fileName);
        InputStream is=null;
        FileOutputStream fos=null;
        try {
          is=new URL("https://github.com/Konloch/bytecode-viewer/raw/master/libs/" + fileName).openConnection().getInputStream();
          fos=new FileOutputStream(file);
          System.out.println("Downloading from " + s);
          byte[] buffer=new byte[8192];
          int len;
          int downloaded=0;
          boolean flag=false;
          while ((len=is.read(buffer)) > 0) {
            fos.write(buffer,0,len);
            fos.flush();
            downloaded+=8192;
            int mbs=downloaded / 1048576;
            if (mbs % 5 == 0 && mbs != 0) {
              if (!flag)               System.out.println("Downloaded " + mbs + "MBs so far");
              flag=true;
            }
 else             flag=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          try {
            if (is != null) {
              is.close();
            }
          }
  finally {
            if (fos != null) {
              fos.flush();
            }
            if (fos != null) {
              fos.close();
            }
          }
        }
        try {
          setState("Bytecode Viewer Boot Screen - Verifying " + fileName + "...");
          System.out.println("Verifying " + fileName + "...");
          File f=new File(BytecodeViewer.tempDirectory,"temp");
          ZipUtils.zipFile(file,f);
          f.delete();
          libsFileList.add(file.getAbsolutePath());
          System.out.println("Download finished!");
          passed=true;
        }
 catch (        Exception e) {
          e.printStackTrace();
          System.out.println("Jar or Zip" + file.getAbsolutePath() + " is corrupt, redownloading.");
          file.delete();
        }
      }
 else       passed=true;
    }
  }
}
