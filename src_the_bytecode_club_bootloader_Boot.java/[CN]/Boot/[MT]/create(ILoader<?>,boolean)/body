{
  setState("Bytecode Viewer Boot Screen - Checking Libraries...");
  final File libsDirectory=libsDir();
  populateUrlList();
  if (globalstop) {
    while (true) {
      Thread.sleep(100);
    }
  }
  if (urlList.isEmpty()) {
    JOptionPane.showMessageDialog(null,"Bytecode Viewer ran into an issue, for some reason github is not returning what we're expecting. Please try rebooting, if this issue persists please contact @Konloch.","Error",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (clean)   libsDirectory.delete();
  if (!libsDirectory.exists())   libsDirectory.mkdir();
  populateLibsDirectory();
  screen.getProgressBar().setMaximum(urlList.size() * 2);
  int completedCheck=0;
  for (  String s : urlList) {
    String fileName=s.substring("https://github.com/Konloch/bytecode-viewer/blob/master/libs/".length(),s.length());
    File file=new File(libsDirectory,fileName);
    boolean passed=false;
    while (!passed) {
      if (!libsList.contains(fileName)) {
        downloading=true;
        setState("Bytecode Viewer Boot Screen - Downloading " + fileName + "...");
        System.out.println("Downloading " + fileName);
        InputStream is=null;
        FileOutputStream fos=null;
        try {
          is=new URL("https://github.com/Konloch/bytecode-viewer/raw/master/libs/" + fileName).openConnection().getInputStream();
          fos=new FileOutputStream(file);
          System.out.println("Downloading from " + s);
          byte[] buffer=new byte[8192];
          int len;
          int downloaded=0;
          boolean flag=false;
          while ((len=is.read(buffer)) > 0) {
            fos.write(buffer,0,len);
            fos.flush();
            downloaded+=8192;
            int mbs=downloaded / 1048576;
            if (mbs % 5 == 0 && mbs != 0) {
              if (!flag)               System.out.println("Downloaded " + mbs + "MBs so far");
              flag=true;
            }
 else             flag=false;
          }
        }
  finally {
          try {
            if (is != null) {
              is.close();
            }
          }
  finally {
            if (fos != null) {
              fos.flush();
            }
            if (fos != null) {
              fos.close();
            }
          }
        }
        try {
          setState("Bytecode Viewer Boot Screen - Verifying " + fileName + "...");
          System.out.println("Verifying " + fileName + "...");
          File f=new File(BytecodeViewer.tempDirectory,"temp");
          ZipUtils.zipFile(file,f);
          f.delete();
          libsFileList.add(file.getAbsolutePath());
          System.out.println("Download finished!");
          passed=true;
        }
 catch (        Exception e) {
          e.printStackTrace();
          System.out.println("Jar or Zip" + file.getAbsolutePath() + " is corrupt, redownloading.");
          file.delete();
        }
      }
 else       if (BytecodeViewer.verify) {
        try {
          setState("Bytecode Viewer Boot Screen - Verifying " + fileName + "...");
          System.out.println("Verifying " + fileName + "...");
          File f=new File(BytecodeViewer.tempDirectory,"temp");
          ZipUtils.zipFile(file,f);
          f.delete();
          passed=true;
        }
 catch (        Exception e) {
          e.printStackTrace();
          System.out.println("Jar or Zip" + file.getAbsolutePath() + " is corrupt, redownloading.");
          libsFileList.remove(file.getAbsolutePath());
          file.delete();
        }
      }
 else {
        passed=true;
      }
    }
    completedCheck++;
    screen.getProgressBar().setValue(completedCheck);
  }
  setState("Bytecode Viewer Boot Screen - Checking & Deleting Foreign/Outdated Libraries...");
  System.out.println("Checking & Deleting foreign/outdated libraries");
  for (  String s : libsFileList) {
    File f=new File(s);
    boolean delete=true;
    for (    String urlS : urlList) {
      String fileName=urlS.substring("https://github.com/Konloch/bytecode-viewer/blob/master/libs/".length(),urlS.length());
      if (fileName.equals(f.getName()))       delete=false;
    }
    if (delete) {
      f.delete();
      System.out.println("Detected & Deleted Foriegn/Outdated Jar/File: " + f.getName());
    }
  }
  setState("Bytecode Viewer Boot Screen - Loading Libraries...");
  System.out.println("Loading libraries...");
  for (  String s : libsFileList) {
    if (s.endsWith(".jar")) {
      File f=new File(s);
      if (f.exists()) {
        setState("Bytecode Viewer Boot Screen - Loading Library " + f.getName());
        System.out.println("Loading library " + f.getName());
        try {
          ExternalResource res=new EmptyExternalResource<Object>(f.toURI().toURL());
          loader.bind(res);
          System.out.println("Succesfully loaded " + f.getName());
        }
 catch (        Exception e) {
          e.printStackTrace();
          f.delete();
          JOptionPane.showMessageDialog(null,"Error, Library " + f.getName() + " is corrupt, please restart to redownload it.","Error",JOptionPane.ERROR_MESSAGE);
        }
      }
      completedCheck++;
      screen.getProgressBar().setValue(completedCheck);
    }
  }
  checkKrakatau();
  completedCheck++;
  screen.getProgressBar().setValue(completedCheck);
  checkEnjarify();
  completedCheck++;
  screen.getProgressBar().setValue(completedCheck);
  setState("Bytecode Viewer Boot Screen - Booting!");
  completedboot=true;
}
