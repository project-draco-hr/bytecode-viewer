{
  long t=-1;
  if (DEBUG)   t=System.currentTimeMillis();
  if (src == null)   throw new IllegalArgumentException("src cannot be null");
  if (padding < 1)   throw new IllegalArgumentException("padding [" + padding + "] must be > 0");
  if (color == null)   throw new IllegalArgumentException("color cannot be null");
  int srcWidth=src.getWidth();
  int srcHeight=src.getHeight();
  int sizeDiff=(padding * 2);
  int newWidth=srcWidth + sizeDiff;
  int newHeight=srcHeight + sizeDiff;
  if (DEBUG)   log(0,"Padding Image from [originalWidth=%d, originalHeight=%d, padding=%d] to [newWidth=%d, newHeight=%d]...",srcWidth,srcHeight,padding,newWidth,newHeight);
  boolean colorHasAlpha=(color.getAlpha() != 255);
  boolean imageHasAlpha=(src.getTransparency() != BufferedImage.OPAQUE);
  BufferedImage result;
  if (colorHasAlpha || imageHasAlpha) {
    if (DEBUG)     log(1,"Transparency FOUND in source image or color, using ARGB image type...");
    result=new BufferedImage(newWidth,newHeight,BufferedImage.TYPE_INT_ARGB);
  }
 else {
    if (DEBUG)     log(1,"Transparency NOT FOUND in source image or color, using RGB image type...");
    result=new BufferedImage(newWidth,newHeight,BufferedImage.TYPE_INT_RGB);
  }
  Graphics g=result.getGraphics();
  g.setColor(color);
  g.fillRect(0,0,newWidth,newHeight);
  g.drawImage(src,padding,padding,null);
  g.dispose();
  if (DEBUG)   log(0,"Padding Applied in %d ms",System.currentTimeMillis() - t);
  if (ops != null && ops.length > 0)   result=apply(result,ops);
  return result;
}
