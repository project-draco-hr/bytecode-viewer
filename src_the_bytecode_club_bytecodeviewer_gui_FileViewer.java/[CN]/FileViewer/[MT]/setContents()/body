{
  String name=this.name.toLowerCase();
  panelArea.setCodeFoldingEnabled(true);
  panelArea.setAntiAliasingEnabled(true);
  RTextScrollPane scrollPane=new RTextScrollPane(panelArea);
  panelArea.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if ((e.getKeyCode() == KeyEvent.VK_F) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
        field.requestFocus();
      }
      BytecodeViewer.checkHotKey(e);
    }
    @Override public void keyReleased(    KeyEvent arg0){
    }
    @Override public void keyTyped(    KeyEvent arg0){
    }
  }
);
  String contentsS=new String(contents);
  if (!isPureAscii(contentsS)) {
    if (name.endsWith(".png") || name.endsWith(".jpg") || name.endsWith(".jpeg")|| name.endsWith(".gif")|| name.endsWith(".tif")|| name.endsWith(".bmp")) {
      canRefresh=true;
      try {
        image=ImageIO.read(new ByteArrayInputStream(contents));
        JLabel label=new JLabel("",new ImageIcon(image),JLabel.CENTER);
        panel2.add(label,BorderLayout.CENTER);
        panel2.addMouseWheelListener(new MouseWheelListener(){
          @Override public void mouseWheelMoved(          MouseWheelEvent e){
            int notches=e.getWheelRotation();
            if (notches < 0) {
              image=Scalr.resize(image,Scalr.Method.SPEED,image.getWidth() + 10,image.getHeight() + 10);
            }
 else {
              image=Scalr.resize(image,Scalr.Method.SPEED,image.getWidth() - 10,image.getHeight() - 10);
            }
            panel2.removeAll();
            JLabel label=new JLabel("",new ImageIcon(image),JLabel.CENTER);
            panel2.add(label,BorderLayout.CENTER);
            panel2.updateUI();
          }
        }
);
        return;
      }
 catch (      Exception e) {
        new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
      }
    }
 else {
      JHexEditor hex=new JHexEditor(contents);
      panel2.add(hex);
      return;
    }
  }
  if (name.endsWith(".xml") || contentsS.startsWith("<?xml") || contentsS.startsWith(("<xml"))) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".py") || name.endsWith(".python")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_PYTHON);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".rb") || name.endsWith(".ruby")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_RUBY);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".java")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".html")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".css")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CSS);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".properties") || name.endsWith(".mf") || name.endsWith(".sf")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_PROPERTIES_FILE);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".php") || name.startsWith("<?php")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_PHP);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".js")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".bat")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_WINDOWS_BATCH);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".sh")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_UNIX_SHELL);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".c")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_C);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".cpp")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".scala")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SCALA);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".clojure")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CLOJURE);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".groovy")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_GROOVY);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".lua")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_LUA);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".sql")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".json")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSON);
    panelArea.setText(contentsS);
  }
 else   if (name.endsWith(".jsp")) {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSP);
    panelArea.setText(contentsS);
  }
 else {
    panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);
    panelArea.setText(contentsS);
  }
  panelArea.setCaretPosition(0);
  scrollPane.setColumnHeaderView(panel);
  panel2.add(scrollPane);
}
