{
  int idx=0;
  StringPattern[] directoryNamePatterns=StringPattern.PATTERNS_ALL;
  StringPattern[] fileNamePatterns=new StringPattern[]{new StringPattern("*.java")};
  File[] classPath=new File[]{new File(".")};
  File[] optionalExtDirs=null;
  File[] optionalBootClassPath=null;
  String optionalCharacterEncoding=null;
  boolean verbose=false;
  for (; idx < args.length; ++idx) {
    String arg=args[idx];
    if (arg.charAt(0) != '-')     break;
    if ("-dirs".equals(arg)) {
      directoryNamePatterns=StringPattern.parseCombinedPattern(args[++idx]);
    }
 else     if ("-files".equals(arg)) {
      fileNamePatterns=StringPattern.parseCombinedPattern(args[++idx]);
    }
 else     if ("-classpath".equals(arg)) {
      classPath=PathResourceFinder.parsePath(args[++idx]);
    }
 else     if ("-extdirs".equals(arg)) {
      optionalExtDirs=PathResourceFinder.parsePath(args[++idx]);
    }
 else     if ("-bootclasspath".equals(arg)) {
      optionalBootClassPath=PathResourceFinder.parsePath(args[++idx]);
    }
 else     if ("-encoding".equals(arg)) {
      optionalCharacterEncoding=args[++idx];
    }
 else     if ("-verbose".equals(arg)) {
      verbose=true;
    }
 else     if ("-help".equals(arg)) {
      for (      String s : JGrep.USAGE)       System.out.println(s);
      System.exit(1);
    }
 else {
      System.err.println("Unexpected command-line argument \"" + arg + "\", try \"-help\".");
      System.exit(1);
      return;
    }
  }
  File[] rootDirectories;
{
    int first=idx;
    for (; idx < args.length && args[idx].charAt(0) != '-'; ++idx)     ;
    if (idx == first) {
      System.err.println("No <directory-path>es given, try \"-help\".");
      System.exit(1);
      return;
    }
    rootDirectories=new File[idx - first];
    for (int i=first; i < idx; ++i)     rootDirectories[i - first]=new File(args[i]);
  }
  final JGrep jGrep=new JGrep(classPath,optionalExtDirs,optionalBootClassPath,optionalCharacterEncoding,verbose);
  List<MethodInvocationTarget> mits=new ArrayList();
  for (; idx < args.length; ++idx) {
    String arg=args[idx];
    if ("-method-invocation".equals(arg)) {
      MethodInvocationTarget mit;
      try {
        mit=JGrep.parseMethodInvocationPattern(args[++idx]);
      }
 catch (      Exception ex) {
        System.err.println("Parsing method invocation pattern \"" + args[idx] + "\": "+ ex.getMessage());
        System.exit(1);
        return;
      }
      while (idx < args.length - 1) {
        arg=args[idx + 1];
        if (arg.startsWith("predicate:")) {
          String predicateExpression=arg.substring(10);
          try {
            IExpressionEvaluator ee=new ExpressionEvaluator();
            ee.setClassName(JGrep.class.getName() + "PE");
            mit.predicates.add((MethodInvocationPredicate)ee.createFastEvaluator(predicateExpression,MethodInvocationPredicate.class,new String[]{"uc","invocation","method"}));
          }
 catch (          Exception ex) {
            System.err.println("Compiling predicate expression \"" + predicateExpression + "\": "+ ex.getMessage());
            System.exit(1);
            return;
          }
        }
 else         if (arg.startsWith("action:")) {
          String action=arg.substring(7);
          try {
            mit.actions.add(Action.getMethodInvocationAction(action));
          }
 catch (          Exception ex) {
            System.err.println("Compiling method invocation action \"" + action + "\": "+ ex.getMessage());
            System.exit(1);
            return;
          }
        }
 else {
          break;
        }
        ++idx;
      }
      mits.add(mit);
    }
 else {
      System.err.println("Unexpected command-line argument \"" + arg + "\", try \"-help\".");
      System.exit(1);
      return;
    }
  }
  try {
    jGrep.jGrep(rootDirectories,directoryNamePatterns,fileNamePatterns,mits);
  }
 catch (  Exception e) {
    System.err.println(e.toString());
    System.exit(1);
  }
}
