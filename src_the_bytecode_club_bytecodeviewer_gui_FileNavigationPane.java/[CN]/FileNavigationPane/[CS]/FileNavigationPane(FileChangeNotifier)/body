{
  super("ClassNavigation");
  this.fcn=fcn;
  tree.setRootVisible(false);
  tree.setShowsRootHandles(true);
  quickSearch.setForeground(Color.gray);
  setTitle("Files");
  this.open.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final TreeNode root=(TreeNode)tree.getModel().getRoot();
      expandAll(tree,new TreePath(root),true);
    }
  }
);
  this.close.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final TreeNode root=(TreeNode)tree.getModel().getRoot();
      expandAll(tree,new TreePath(root),false);
      tree.expandPath(new TreePath(root));
    }
  }
);
  this.tree.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      openPath(tree.getPathForLocation(e.getX(),e.getY()));
    }
  }
);
  this.tree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    final TreeSelectionEvent arg0){
      if (cancel) {
        cancel=false;
        return;
      }
      openPath(arg0.getPath());
    }
  }
);
  this.tree.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent arg0){
      if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
        if (arg0.getSource() instanceof MyTree) {
          MyTree tree=(MyTree)arg0.getSource();
          openPath(tree.getSelectionPath());
        }
      }
 else {
        cancel=true;
      }
    }
    @Override public void keyTyped(    KeyEvent e){
      quickSearch.grabFocus();
      quickSearch.setText("" + e.getKeyChar());
      cancel=true;
    }
    @Override public void keyPressed(    KeyEvent e){
      quickSearch.grabFocus();
      quickSearch.setText("" + e.getKeyChar());
      cancel=true;
    }
  }
);
  quickSearch.addKeyListener(search);
  quickSearch.addFocusListener(new FocusListener(){
    @Override public void focusGained(    final FocusEvent arg0){
      if (quickSearch.getText().equals(quickSearchText)) {
        quickSearch.setText("");
        quickSearch.setForeground(Color.black);
      }
    }
    @Override public void focusLost(    final FocusEvent arg0){
      if (quickSearch.getText().isEmpty()) {
        quickSearch.setText(quickSearchText);
        quickSearch.setForeground(Color.gray);
      }
    }
  }
);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(new JScrollPane(tree),BorderLayout.CENTER);
  JPanel p2=new JPanel();
  p2.setLayout(new BorderLayout());
  p2.add(quickSearch,BorderLayout.NORTH);
  JPanel p3=new JPanel(new BorderLayout());
  p3.add(exact,BorderLayout.WEST);
  JPanel p4=new JPanel(new BorderLayout());
  p4.add(open,BorderLayout.EAST);
  p4.add(close,BorderLayout.WEST);
  p3.add(p4,BorderLayout.EAST);
  p2.add(p3,BorderLayout.SOUTH);
  getContentPane().add(p2,BorderLayout.SOUTH);
  this.setVisible(true);
  new FileDrop(this,this);
}
