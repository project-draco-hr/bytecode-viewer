{
  Method[] methods=this.clazz.getDeclaredMethods();
  if (methods.length == 0 && this.clazz.isArray()) {
    return new IMethod[]{new IMethod(){
      @Override public String getName(){
        return "clone";
      }
      @Override public IClass getReturnType(){
        return ReflectionIClass.this.iClassLoader.TYPE_java_lang_Object;
      }
      @Override public boolean isAbstract(){
        return false;
      }
      @Override public boolean isStatic(){
        return false;
      }
      @Override public Access getAccess(){
        return Access.PUBLIC;
      }
      @Override public boolean isVarargs(){
        return false;
      }
      @Override public IClass[] getParameterTypes2(){
        return new IClass[0];
      }
      @Override public IClass[] getThrownExceptions2(){
        return new IClass[0];
      }
      @Override public Java.Annotation[] getAnnotations(){
        return new Java.Annotation[0];
      }
    }
};
  }
  IMethod[] result=new IMethod[methods.length];
  for (int i=0; i < result.length; i++)   result[i]=new ReflectionIMethod(methods[i]);
  return result;
}
