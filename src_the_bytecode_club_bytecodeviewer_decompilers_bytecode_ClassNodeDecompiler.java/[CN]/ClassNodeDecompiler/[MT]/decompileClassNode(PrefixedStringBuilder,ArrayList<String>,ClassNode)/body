{
  ArrayList<String> unableToDecompile=new ArrayList<String>();
  decompiledClasses.add(cn.name);
  sb.append(getAccessString(cn.access));
  sb.append(" ");
  sb.append(cn.name);
  if (cn.superName != null && !cn.superName.equals("java/lang/Object")) {
    sb.append(" extends ");
    sb.append(cn.superName);
  }
  int amountOfInterfaces=cn.interfaces.size();
  if (amountOfInterfaces > 0) {
    sb.append(" implements ");
    sb.append(cn.interfaces.get(0));
    if (amountOfInterfaces > 1) {
    }
    for (int i=1; i < amountOfInterfaces; i++) {
      sb.append(", ");
      sb.append(cn.interfaces.get(i));
    }
  }
  sb.append(" {");
  sb.append(BytecodeViewer.nl);
  for (  FieldNode fn : (List<FieldNode>)cn.fields) {
    sb.append(BytecodeViewer.nl);
    sb.append("     ");
    FieldNodeDecompiler.decompile(sb,fn);
  }
  if (cn.fields.size() > 0) {
    sb.append(BytecodeViewer.nl);
  }
  for (  MethodNode mn : (List<MethodNode>)cn.methods) {
    sb.append(BytecodeViewer.nl);
    MethodNodeDecompiler.decompile(sb,mn,cn);
  }
  for (  Object o : cn.innerClasses) {
    InnerClassNode innerClassNode=(InnerClassNode)o;
    String innerClassName=innerClassNode.name;
    if ((innerClassName != null) && !decompiledClasses.contains(innerClassName)) {
      decompiledClasses.add(innerClassName);
      ClassNode cn1=BytecodeViewer.getClassNode(innerClassName);
      if (cn1 != null) {
        sb.appendPrefix("     ");
        sb.append(BytecodeViewer.nl + BytecodeViewer.nl);
        sb=decompileClassNode(sb,decompiledClasses,cn1);
        sb.trimPrefix(5);
        sb.append(BytecodeViewer.nl);
      }
 else {
        unableToDecompile.add(innerClassName);
      }
    }
  }
  if (!unableToDecompile.isEmpty()) {
    sb.append("//the following inner classes couldn't be decompiled: ");
    for (    String s : unableToDecompile) {
      sb.append(s);
      sb.append(" ");
    }
    sb.append(BytecodeViewer.nl);
  }
  sb.append("}");
  return sb;
}
