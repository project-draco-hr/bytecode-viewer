{
  int c=0, p=0;
  if (ain instanceof InsnNode || ain instanceof IntInsnNode || ain instanceof VarInsnNode|| ain instanceof JumpInsnNode|| ain instanceof TableSwitchInsnNode|| ain instanceof LookupSwitchInsnNode) {
    c=CDS[ain.opcode()];
    p=PDS[ain.opcode()];
  }
 else   if (ain instanceof FieldInsnNode) {
    FieldInsnNode fin=(FieldInsnNode)ain;
    char d=fin.desc.charAt(0);
switch (fin.opcode()) {
case GETFIELD:
{
        c=1;
        p=d == 'D' || d == 'J' ? 2 : 1;
        break;
      }
case GETSTATIC:
{
      c=0;
      p=d == 'D' || d == 'J' ? 2 : 1;
      break;
    }
case PUTFIELD:
{
    c=d == 'D' || d == 'J' ? 3 : 2;
    p=0;
    break;
  }
case PUTSTATIC:
{
  c=d == 'D' || d == 'J' ? 2 : 1;
  p=0;
  break;
}
default :
{
c=0;
p=0;
break;
}
}
}
 else if (ain instanceof MethodInsnNode) {
MethodInsnNode min=(MethodInsnNode)ain;
int as=Type.getArgumentsAndReturnSizes(min.desc);
c=(as >> 2) - (min.opcode() == INVOKEDYNAMIC || min.opcode() == INVOKESTATIC ? 1 : 0);
p=as & 0x03;
}
 else if (ain instanceof LdcInsnNode) {
Object cst=((LdcInsnNode)ain).cst;
p=cst instanceof Double || cst instanceof Long ? 2 : 1;
}
 else if (ain instanceof MultiANewArrayInsnNode) {
c=((MultiANewArrayInsnNode)ain).dims;
p=1;
}
return new TreeSize(c,p);
}
