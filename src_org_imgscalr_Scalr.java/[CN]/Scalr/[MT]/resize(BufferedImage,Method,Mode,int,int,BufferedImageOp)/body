{
  long t=-1;
  if (DEBUG)   t=System.currentTimeMillis();
  if (src == null)   throw new IllegalArgumentException("src cannot be null");
  if (targetWidth < 0)   throw new IllegalArgumentException("targetWidth must be >= 0");
  if (targetHeight < 0)   throw new IllegalArgumentException("targetHeight must be >= 0");
  if (scalingMethod == null)   throw new IllegalArgumentException("scalingMethod cannot be null. A good default value is Method.AUTOMATIC.");
  if (resizeMode == null)   throw new IllegalArgumentException("resizeMode cannot be null. A good default value is Mode.AUTOMATIC.");
  BufferedImage result=null;
  int currentWidth=src.getWidth();
  int currentHeight=src.getHeight();
  float ratio=((float)currentHeight / (float)currentWidth);
  if (DEBUG)   log(0,"Resizing Image [size=%dx%d, resizeMode=%s, orientation=%s, ratio(H/W)=%f] to [targetSize=%dx%d]",currentWidth,currentHeight,resizeMode,(ratio <= 1 ? "Landscape/Square" : "Portrait"),ratio,targetWidth,targetHeight);
  if (resizeMode == Mode.FIT_EXACT) {
    if (DEBUG)     log(1,"Resize Mode FIT_EXACT used, no width/height checking or re-calculation will be done.");
  }
 else   if (resizeMode == Mode.BEST_FIT_BOTH) {
    float requestedHeightScaling=((float)targetHeight / (float)currentHeight);
    float requestedWidthScaling=((float)targetWidth / (float)currentWidth);
    float actualScaling=Math.min(requestedHeightScaling,requestedWidthScaling);
    targetHeight=Math.round((float)currentHeight * actualScaling);
    targetWidth=Math.round((float)currentWidth * actualScaling);
    if (targetHeight == currentHeight && targetWidth == currentWidth)     return src;
    if (DEBUG)     log(1,"Auto-Corrected width and height based on scalingRatio %d.",actualScaling);
  }
 else {
    if ((ratio <= 1 && resizeMode == Mode.AUTOMATIC) || (resizeMode == Mode.FIT_TO_WIDTH)) {
      if (targetWidth == src.getWidth())       return src;
      int originalTargetHeight=targetHeight;
      targetHeight=Math.round((float)targetWidth * ratio);
      if (DEBUG && originalTargetHeight != targetHeight)       log(1,"Auto-Corrected targetHeight [from=%d to=%d] to honor image proportions.",originalTargetHeight,targetHeight);
    }
 else {
      if (targetHeight == src.getHeight())       return src;
      int originalTargetWidth=targetWidth;
      targetWidth=Math.round((float)targetHeight / ratio);
      if (DEBUG && originalTargetWidth != targetWidth)       log(1,"Auto-Corrected targetWidth [from=%d to=%d] to honor image proportions.",originalTargetWidth,targetWidth);
    }
  }
  if (scalingMethod == Scalr.Method.AUTOMATIC)   scalingMethod=determineScalingMethod(targetWidth,targetHeight,ratio);
  if (DEBUG)   log(1,"Using Scaling Method: %s",scalingMethod);
  if (scalingMethod == Scalr.Method.SPEED) {
    result=scaleImage(src,targetWidth,targetHeight,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
  }
 else   if (scalingMethod == Scalr.Method.BALANCED) {
    result=scaleImage(src,targetWidth,targetHeight,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  }
 else   if (scalingMethod == Scalr.Method.QUALITY || scalingMethod == Scalr.Method.ULTRA_QUALITY) {
    if (targetWidth > currentWidth || targetHeight > currentHeight) {
      if (DEBUG)       log(1,"QUALITY scale-up, a single BICUBIC scale operation will be used...");
      result=scaleImage(src,targetWidth,targetHeight,RenderingHints.VALUE_INTERPOLATION_BICUBIC);
    }
 else {
      if (DEBUG)       log(1,"QUALITY scale-down, incremental scaling will be used...");
      result=scaleImageIncrementally(src,targetWidth,targetHeight,scalingMethod,RenderingHints.VALUE_INTERPOLATION_BICUBIC);
    }
  }
  if (DEBUG)   log(0,"Resized Image in %d ms",System.currentTimeMillis() - t);
  if (ops != null && ops.length > 0)   result=apply(result,ops);
  return result;
}
