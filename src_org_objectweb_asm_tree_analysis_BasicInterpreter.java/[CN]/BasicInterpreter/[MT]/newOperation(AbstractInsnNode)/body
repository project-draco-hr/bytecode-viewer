{
switch (insn.opcode()) {
case ACONST_NULL:
    return newValue(Type.getObjectType("null"));
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
  return BasicValue.INT_VALUE;
case LCONST_0:
case LCONST_1:
return BasicValue.LONG_VALUE;
case FCONST_0:
case FCONST_1:
case FCONST_2:
return BasicValue.FLOAT_VALUE;
case DCONST_0:
case DCONST_1:
return BasicValue.DOUBLE_VALUE;
case BIPUSH:
case SIPUSH:
return BasicValue.INT_VALUE;
case LDC:
Object cst=((LdcInsnNode)insn).cst;
if (cst instanceof Integer) {
return BasicValue.INT_VALUE;
}
 else if (cst instanceof Float) {
return BasicValue.FLOAT_VALUE;
}
 else if (cst instanceof Long) {
return BasicValue.LONG_VALUE;
}
 else if (cst instanceof Double) {
return BasicValue.DOUBLE_VALUE;
}
 else if (cst instanceof String) {
return newValue(Type.getObjectType("java/lang/String"));
}
 else if (cst instanceof Type) {
int sort=((Type)cst).getSort();
if (sort == Type.OBJECT || sort == Type.ARRAY) {
return newValue(Type.getObjectType("java/lang/Class"));
}
 else if (sort == Type.METHOD) {
return newValue(Type.getObjectType("java/lang/invoke/MethodType"));
}
 else {
throw new IllegalArgumentException("Illegal LDC constant " + cst);
}
}
 else if (cst instanceof Handle) {
return newValue(Type.getObjectType("java/lang/invoke/MethodHandle"));
}
 else {
throw new IllegalArgumentException("Illegal LDC constant " + cst);
}
case JSR:
return BasicValue.RETURNADDRESS_VALUE;
case GETSTATIC:
return newValue(Type.getType(((FieldInsnNode)insn).desc));
case NEW:
return newValue(Type.getObjectType(((TypeInsnNode)insn).desc));
default :
throw new Error("Internal error.");
}
}
